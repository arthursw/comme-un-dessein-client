// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['paper', 'R', 'Utils/Utils', 'UI/Modal', 'i18next'], function(P, R, Utils, Modal, i18next) {
    var ExquisiteCorpseMask;
    ExquisiteCorpseMask = (function() {
      ExquisiteCorpseMask.margin = 20 * R.city.pixelPerMm;

      function ExquisiteCorpseMask(grid) {
        this.grid = grid;
        this.submitCallback = bind(this.submitCallback, this);
        this.chooseTile = bind(this.chooseTile, this);
        this.createChooseTileModal = bind(this.createChooseTileModal, this);
        this.mouseBegin = bind(this.mouseBegin, this);
        this.tiles = new Map();
        this.tilePks = [];
        return;
      }

      ExquisiteCorpseMask.prototype.getTileXYAt = function(point) {
        var nx, ny, tileHeight, tileWidth;
        tileWidth = R.city.tileWidth * R.city.pixelPerMm;
        tileHeight = R.city.tileHeight * R.city.pixelPerMm;
        nx = Math.floor((point.x - this.grid.limitCDRectangle.left) / tileWidth);
        ny = Math.floor((point.y - this.grid.limitCDRectangle.top) / tileHeight);
        return new P.Point(nx, ny);
      };

      ExquisiteCorpseMask.prototype.getTileAt = function(point) {
        var pointN, ref;
        pointN = this.getTileXYAt(point);
        return (ref = this.tiles.get(pointN.y)) != null ? ref.get(pointN.x) : void 0;
      };

      ExquisiteCorpseMask.prototype.createMask = function() {
        var line, n, nx, ny, rectangle, th, tile, tileHeight, tileWidth, tilesRow, tw, x, y;
        this.group = new P.Group();
        this.tileGroup = new P.Group();
        this.group.addChild(this.tileGroup);
        this.group.name = 'exquisiteCorpseGroup';
        this.tileGroup.name = 'exquisiteCorpseTileGroup';
        tileWidth = R.city.tileWidth * R.city.pixelPerMm;
        tileHeight = R.city.tileHeight * R.city.pixelPerMm;
        x = this.grid.limitCDRectangle.left;
        nx = 0;
        y = this.grid.limitCDRectangle.top;
        ny = 0;
        n = 1;
        while (y < this.grid.limitCDRectangle.bottom) {
          nx = 0;
          x = this.grid.limitCDRectangle.left;
          while (x < this.grid.limitCDRectangle.right) {
            tw = Math.min(tileWidth, this.grid.limitCDRectangle.right - x);
            th = Math.min(tileHeight, this.grid.limitCDRectangle.bottom - y);
            rectangle = new P.Rectangle(x, y, tw, th);
            tile = new P.Path.Rectangle(rectangle.expand(-this.constructor.margin));
            tile.fillColor = R.selectionBlue;
            tile.data.rectangle = rectangle;
            if (R.city.finished) {
              tile.visible = false;
            }
            line = new P.Path.Rectangle(rectangle);
            line.strokeColor = 'black';
            line.opacity = 0.25;
            line.strokeWidth = 1;
            tile.data.x = nx;
            tile.data.y = ny;
            tile.data.number = n;
            n++;
            tilesRow = this.tiles.get(ny);
            if (tilesRow == null) {
              tilesRow = new Map();
              this.tiles.set(ny, tilesRow);
            }
            this.tileGroup.addChild(tile);
            this.group.addChild(line);
            tilesRow.set(nx, tile);
            x += tileWidth;
            nx++;
          }
          y += tileHeight;
          ny++;
        }
      };

      ExquisiteCorpseMask.prototype.hideTile = function(tile) {
        var ref, ref1;
        if ((ref = this.tiles.get(tile.y)) != null) {
          if ((ref1 = ref.get(tile.x)) != null) {
            ref1.visible = false;
          }
        }
      };

      ExquisiteCorpseMask.prototype.createTile = function(tile) {
        this.hideTile(tile);
        return tile;
      };

      ExquisiteCorpseMask.prototype.removeTile = function(tileInfo, tile) {};

      ExquisiteCorpseMask.prototype.removeTiles = function(limits) {};

      ExquisiteCorpseMask.prototype.mouseMove = function(event) {
        var i, len, ref, sb, tile;
        ref = this.tileGroup.children;
        for (i = 0, len = ref.length; i < len; i++) {
          tile = ref[i];
          tile.fillColor = R.selectionBlue;
        }
        tile = this.getTileAt(event.point);
        sb = new P.Color(R.selectionBlue);
        sb.setLightness(sb.getLightness() + 0.3);
        if (tile != null) {
          tile.fillColor = sb;
        }
      };

      ExquisiteCorpseMask.prototype.mouseBegin = function(event) {
        var tile;
        tile = this.getTileAt(event.point);
        if (tile != null ? tile.visible : void 0) {
          this.createChooseTileModal(event, tile);
        }
        return !(tile != null ? tile.visible : void 0);
      };

      ExquisiteCorpseMask.prototype.isDraftOnBounds = function() {
        var bounds, ref, tile;
        bounds = (ref = R.Drawing.getDraft()) != null ? ref.getBounds() : void 0;
        if (bounds == null) {
          return true;
        }
        tile = this.getTileAt(bounds.topLeft);
        return (tile != null) && tile.data.rectangle.contains(bounds);
      };

      ExquisiteCorpseMask.prototype.isTileAtPointRevealed = function(event) {
        var tile;
        tile = this.getTileAt(event.point);
        return !tile.visible;
      };

      ExquisiteCorpseMask.prototype.mouseUpdate = function(event) {
        var bounds, draftInTile, ref, tile;
        tile = this.getTileAt(event.point);
        bounds = (ref = R.Drawing.getDraft()) != null ? ref.getBounds() : void 0;
        draftInTile = (bounds == null) || tile.data.rectangle.contains(bounds);
        return !tile.visible && draftInTile;
      };

      ExquisiteCorpseMask.prototype.createChooseTileModal = function(event, tile) {
        var divJ, modal, nTiles, nTilesLeft, ref;
        nTiles = ((ref = R.userProfile) != null ? ref.nTiles : void 0) || 0;
        nTilesLeft = R.city.nTilesMax - R.userProfile.nTiles;
        if (nTilesLeft <= 0) {
          modal = Modal.createModal({
            id: 'choose-tile',
            title: "Maximum number of tiles revealed",
            submit: (function(_this) {
              return function() {
                return _this.ignoreMouseMoves = false;
              };
            })(this)
          });
          modal.addText('You cannot reveal more than n tiles', 'You_cannot_reveal_more_than_n_tiles', false, {
            count: R.city.nTilesMax
          });
          modal.show();
          this.ignoreMouseMoves = true;
          return;
        }
        if (tile == null) {
          tile = this.getTileAt(event.point);
        }
        modal = Modal.createModal({
          id: 'choose-tile',
          title: "Choose tile",
          submit: ((function(_this) {
            return function() {
              return _this.chooseTile(tile.data.number, tile.data.x, tile.data.y, tile.data.rectangle);
            };
          })(this))
        });
        modal.addText('Do you really want to reveal this tile?', 'Do you want to reveal this tile', false, {
          tileNumber: tile.data.number
        });
        divJ = modal.addText('You can still reveal n tiles.', 'You can still reveal n tiles', false, {
          count: nTilesLeft
        });
        divJ.text(divJ.text());
        modal.modalJ.on('hidden.bs.modal', (function(_this) {
          return function() {
            return _this.ignoreMouseMoves = false;
          };
        })(this));
        modal.show();
        this.ignoreMouseMoves = true;
      };

      ExquisiteCorpseMask.prototype.chooseTile = function(number, x, y, bounds) {
        var args;
        this.ignoreMouseMoves = false;
        R.loader.showLoadingBar(500);
        R.userProfile.nTiles++;
        args = {
          number: number,
          x: x,
          y: y,
          bounds: bounds,
          cityName: R.city.name,
          clientId: Utils.createId()
        };
        $.ajax({
          method: "POST",
          url: "ajaxCall/",
          data: {
            data: JSON.stringify({
              "function": 'submitTile',
              args: args
            })
          }
        }).done(this.submitCallback);
      };

      ExquisiteCorpseMask.prototype.submitCallback = function(result) {
        R.loader.hideLoadingBar();
        if (!R.loader.checkError(result)) {
          R.userProfile.nTiles--;
          return;
        }
        result.tile = JSON.parse(result.tile);
        this.createTile(result.tile);
      };

      return ExquisiteCorpseMask;

    })();
    return ExquisiteCorpseMask;
  });

}).call(this);
