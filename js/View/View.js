// Generated by CoffeeScript 1.10.0
(function() {
  var dependencies,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  dependencies = ['paper', 'R', 'Utils/Utils', 'View/Grid', 'Commands/Command', 'Items/Paths/Path', 'Items/Divs/Div'];

  if (typeof document !== "undefined" && document !== null) {
    dependencies.push('i18next');
    dependencies.push('hammer');
    dependencies.push('tween');
    dependencies.push('mousewheel');
  }

  define('View/View', dependencies, function(P, R, Utils, Grid, Command, Path, Div, i18next, Hammer, tw, mousewheel) {
    var View;
    View = (function() {
      View.thumbnailSize = 300;

      function View() {
        this.mousewheel = bind(this.mousewheel, this);
        this.mouseup = bind(this.mouseup, this);
        this.mousemove = bind(this.mousemove, this);
        this.mousedown = bind(this.mousedown, this);
        this.onWindowResize = bind(this.onWindowResize, this);
        this.onFrame = bind(this.onFrame, this);
        this.onKeyUp = bind(this.onKeyUp, this);
        this.onKeyDown = bind(this.onKeyDown, this);
        this.onMouseUp = bind(this.onMouseUp, this);
        this.onMouseDrag = bind(this.onMouseDrag, this);
        this.onMouseDown = bind(this.onMouseDown, this);
        this.onHashChange = bind(this.onHashChange, this);
        this.updateHash = bind(this.updateHash, this);
        this.addMoveCommand = bind(this.addMoveCommand, this);
        this.showDraftLayer = bind(this.showDraftLayer, this);
        this.hideDraftLayer = bind(this.hideDraftLayer, this);
        var hammertime;
        R.stageJ = $("#stage");
        R.canvasJ = R.stageJ.find("#canvas");
        R.canvas = R.canvasJ[0];
        R.canvas.width = typeof window !== "undefined" && window !== null ? R.stageJ.innerWidth() : R.canvasWidth;
        R.canvas.height = typeof window !== "undefined" && window !== null ? R.stageJ.innerHeight() : R.canvasHeight;
        R.context = R.canvas.getContext('2d');
        paper.setup(R.canvas);
        R.project = P.project;
        this.mainLayer = P.project.activeLayer;
        this.mainLayer.name = 'mainLayer';
        this.createLayers();
        this.debugLayer = new P.Layer();
        this.debugLayer.name = 'debugLayer';
        this.selectionLayer = new P.Layer();
        this.selectionLayer.name = 'selectionLayer';
        this.areasToUpdateLayer = new P.Layer();
        this.areasToUpdateLayer.name = 'areasToUpdateLayer';
        this.backgroundRectangle = null;
        this.areasToUpdateLayer.visible = false;
        paper.settings.hitTolerance = 5;
        R.scale = 1000.0;
        P.view.zoom = 1;
        this.previousPosition = P.view.center;
        this.restrictedArea = null;
        this.entireArea = null;
        this.entireAreas = [];
        this.grid = new Grid();
        this.mainLayer.activate();
        R.canvasJ.dblclick(function(event) {
          var ref;
          return (ref = R.selectedTool) != null ? typeof ref.doubleClick === "function" ? ref.doubleClick(event) : void 0 : void 0;
        });
        R.canvasJ.keydown(function(event) {
          if (event.key === 46) {
            event.preventDefault();
            return false;
          }
        });
        this.tool = new P.Tool();
        this.tool.onMouseDown = this.onMouseDown;
        this.tool.onMouseDrag = this.onMouseDrag;
        this.tool.onMouseUp = this.onMouseUp;
        this.tool.onKeyDown = this.onKeyDown;
        this.tool.onKeyUp = this.onKeyUp;
        P.view.onFrame = this.onFrame;
        R.stageJ.mousewheel(this.mousewheel);
        R.stageJ.mousedown(this.mousedown);
        R.stageJ.on({
          touchstart: this.mousedown
        });
        if (typeof window !== "undefined" && window !== null) {
          $(window).mousemove(this.mousemove);
          $(window).on({
            touchmove: this.mousemove
          });
          $(window).mouseup(this.mouseup);
          $(window).on({
            touchend: this.mouseup
          });
          $(window).on({
            touchleave: this.mouseup
          });
          $(window).on({
            touchcancel: this.mouseup
          });
          $(window).resize(this.onWindowResize);
          window.onhashchange = this.onHashChange;
          hammertime = new Hammer(R.canvas);
          hammertime.get('pinch').set({
            enable: true
          });
          hammertime.on('pinch', (function(_this) {
            return function(event) {
              console.log(event.scale);
              R.toolManager.zoom(event.scale, false);
            };
          })(this));
        }
        this.mousePosition = new P.Point();
        this.previousMousePosition = null;
        this.initialMousePosition = null;
        this.firstHashChange = true;
        this.createThumbnailProject();
        return;
      }

      View.prototype.createThumbnailProject = function() {
        var thumbnailCanvas;
        thumbnailCanvas = document.createElement('canvas');
        thumbnailCanvas.width = this.constructor.thumbnailSize;
        thumbnailCanvas.height = this.constructor.thumbnailSize;
        this.thumbnailProject = new P.Project(thumbnailCanvas);
        paper.projects[0].activate();
      };

      View.prototype.getThumbnail = function(drawing) {
        var i, len, path, rectangle, rectangleRatio, ref, svg, viewRatio;
        this.thumbnailProject.activate();
        rectangle = drawing.getBounds();
        viewRatio = 1;
        rectangleRatio = rectangle.width / rectangle.height;
        if (drawing.svg != null) {
          this.thumbnailProject.importSVG(drawing.svg);
        } else if ((drawing.paths != null) && drawing.paths.length > 0) {
          ref = drawing.paths;
          for (i = 0, len = ref.length; i < len; i++) {
            path = ref[i];
            this.thumbnailProject.activeLayer.addChild(path.path);
          }
        } else {
          console.error('drawing is empty');
        }
        if (viewRatio < rectangleRatio) {
          this.thumbnailProject.view.zoom = Math.min(this.constructor.thumbnailSize / rectangle.width, 1);
        } else {
          this.thumbnailProject.view.zoom = Math.min(this.constructor.thumbnailSize / rectangle.height, 1);
        }
        this.thumbnailProject.view.setCenter(rectangle.center);
        this.thumbnailProject.activeLayer.strokeColor = R.Path.colorMap[drawing.status];
        svg = this.thumbnailProject.exportSVG();
        this.thumbnailProject.clear();
        paper.projects[0].activate();
        return svg;
      };

      View.prototype.createBackground = function() {
        if (R.drawingMode === 'image' && (this.backgroundImage == null)) {
          this.backgroundImage = new P.Raster('static/images/rennes.jpg');
          this.backgroundImage.onLoad = (function(_this) {
            return function() {
              _this.backgroundImage.width = _this.grid.limitCD.bounds.width;
              _this.backgroundImage.height = _this.grid.limitCD.bounds.height;
            };
          })(this);
          this.backgroundImage.opacity = 0.5;
          P.project.layers[1].addChild(this.backgroundImage);
          this.backgroundImage.sendToBack();
          this.backgroundListJ = this.createLayerListItem('Background', this.backgroundImage, true, false, false);
        } else if (R.drawingMode !== 'image' && (this.backgroundImage != null)) {
          this.backgroundImage.remove();
          this.backgroundImage = null;
          this.backgroundListJ.remove();
        }
      };

      View.prototype.createLayerListItem = function(title, item, noArrow, prepend, badge) {
        var itemListJ, nItemsJ, showBtnJ, titleJ;
        if (noArrow == null) {
          noArrow = false;
        }
        if (prepend == null) {
          prepend = true;
        }
        if (badge == null) {
          badge = true;
        }
        itemListJ = R.templatesJ.find(".layer").clone();
        itemListJ.attr('data-name', item.name);
        nItemsJ = itemListJ.find(".n-items");
        nItemsJ.addClass(title.toLowerCase() + '-color');
        titleJ = itemListJ.find(".title");
        titleJ.attr('data-i18n', title);
        titleJ.text(i18next.t(title));
        if (noArrow) {
          titleJ.addClass('no-arrow');
        }
        if (!noArrow) {
          titleJ.click((function(_this) {
            return function(event) {
              itemListJ.toggleClass('closed');
              if (!event.shiftKey) {
                R.tools.select.deselectAll();
              }
            };
          })(this));
        }
        showBtnJ = itemListJ.find(".show-btn");
        item.data.setVisibility = (function(_this) {
          return function(visible) {
            var SVGLayerJ, base, base1, child, eyeIconJ, i, len, ref;
            R.tools.select.deselectAll();
            item.visible = visible;
            ref = item.children;
            for (i = 0, len = ref.length; i < len; i++) {
              child = ref[i];
              if ((child.controller != null) && child.controller instanceof Path && (child.controller.drawing == null)) {
                if (typeof (base = child.controller).draw === "function") {
                  base.draw();
                }
                if (typeof (base1 = child.controller).rasterize === "function") {
                  base1.rasterize();
                }
              }
            }
            R.rasterizer.refresh();
            SVGLayerJ = document.getElementById(item.name);
            SVGLayerJ.setAttribute('visibility', visible ? 'visible' : 'hidden');
            eyeIconJ = itemListJ.find("span.eye");
            if (item.visible) {
              eyeIconJ.removeClass('glyphicon-eye-close').addClass('glyphicon-eye-open');
            } else {
              eyeIconJ.removeClass('glyphicon-eye-open').addClass('glyphicon-eye-close');
            }
          };
        })(this);
        if (!item.visible) {
          itemListJ.find("span.eye").removeClass('glyphicon-eye-open').addClass('glyphicon-eye-close');
        }
        showBtnJ.mousedown((function(_this) {
          return function(event) {
            item.data.setVisibility(!item.visible);
            event.preventDefault();
            event.stopPropagation();
            return -1;
          };
        })(this));
        if (prepend) {
          R.sidebar.itemListsJ.prepend(itemListJ);
        } else {
          R.sidebar.itemListsJ.append(itemListJ);
        }
        if (!badge) {
          itemListJ.find('span.badge').hide();
        }
        return itemListJ;
      };

      View.prototype.hideDraftLayer = function() {
        this.mainLayer.data.setVisibility(false);
      };

      View.prototype.showDraftLayer = function() {
        this.mainLayer.data.setVisibility(true);
      };

      View.prototype.createLayers = function() {
        this.rejectedLayer = new P.Layer();
        this.rejectedLayer.name = 'rejectedLayer';
        this.rejectedLayer.visible = false;
        this.rejectedLayer.strokeColor = '#EB5A46';
        this.pendingLayer = new P.Layer();
        this.pendingLayer.name = 'pendingLayer';
        this.pendingLayer.strokeColor = '#0079BF';
        this.drawingLayer = new P.Layer();
        this.drawingLayer.name = 'drawingLayer';
        this.drawingLayer.strokeColor = '#61BD4F';
        this.drawnLayer = new P.Layer();
        this.drawnLayer.name = 'drawnLayer';
        this.drawnLayer.strokeColor = '#4d4d4d';
        this.draftLayer = new P.Layer();
        this.draftLayer.name = 'draftLayer';
        this.draftLayer.strokeColor = '#00C2E0';
        this.draftListJ = this.createLayerListItem('Draft', this.draftLayer, true);
        this.pendingListJ = this.createLayerListItem('Pending', this.pendingLayer);
        this.drawingListJ = this.createLayerListItem('Drawing', this.drawingLayer);
        this.drawnListJ = this.createLayerListItem('Drawn', this.drawnLayer);
        this.rejectedListJ = this.createLayerListItem('Rejected', this.rejectedLayer);
      };

      View.prototype.getViewBounds = function(considerPanels) {
        var bottomRight, drawingPanelWidth, sidebarWidth, topLeft;
        if (window.innerWidth < 600) {
          considerPanels = false;
        }
        if (considerPanels) {
          sidebarWidth = R.sidebar.isOpened() ? R.sidebar.sidebarJ.outerWidth() : 0;
          drawingPanelWidth = R.drawingPanel.isOpened() ? R.drawingPanel.drawingPanelJ.outerWidth() : 0;
          topLeft = P.view.viewToProject(new P.Point(sidebarWidth, 0));
          bottomRight = P.view.viewToProject(new P.Point(window.innerWidth - drawingPanelWidth, window.innerHeight - 50));
          return new P.Rectangle(topLeft, bottomRight);
        }
        return P.view.bounds;
      };

      View.prototype.moveTo = function(pos, delay, addCommand, preventLoad) {
        var initialPosition, somethingToLoad, tween;
        if (addCommand == null) {
          addCommand = true;
        }
        if (preventLoad == null) {
          preventLoad = false;
        }
        if (pos == null) {
          pos = new P.Point();
        }
        if (delay == null) {
          somethingToLoad = this.moveBy(pos.subtract(P.view.center), addCommand, preventLoad);
        } else {
          initialPosition = P.view.center;
          tween = new TWEEN.Tween(initialPosition).to(pos, delay).easing(TWEEN.Easing.Exponential.InOut).onUpdate(function() {
            return this.moveTo(this, addCommand, preventLoad);
          }).start();
        }
        return somethingToLoad;
      };

      View.prototype.moveBy = function(delta, addCommand, preventLoad) {
        var area, div, i, j, len, len1, newEntireArea, newView, previousCenter, ref, ref1, restrictedAreaShrinked, somethingToLoad;
        if (addCommand == null) {
          addCommand = true;
        }
        if (preventLoad == null) {
          preventLoad = false;
        }
        if (this.restrictedArea != null) {
          if (!this.restrictedArea.contains(P.view.center)) {
            delta = this.restrictedArea.center.subtract(P.view.center);
          } else {
            newView = this.getViewBounds(true);
            previousCenter = newView.center.clone();
            newView.center.x += delta.x;
            newView.center.y += delta.y;
            if (!this.restrictedArea.contains(newView)) {
              restrictedAreaShrinked = this.restrictedArea.expand(newView.size.multiply(-1));
              if (restrictedAreaShrinked.width < 0) {
                restrictedAreaShrinked.left = restrictedAreaShrinked.right = this.restrictedArea.center.x;
              }
              if (restrictedAreaShrinked.height < 0) {
                restrictedAreaShrinked.top = restrictedAreaShrinked.bottom = this.restrictedArea.center.y;
              }
              newView.center.x = Utils.clamp(restrictedAreaShrinked.left, newView.center.x, restrictedAreaShrinked.right);
              newView.center.y = Utils.clamp(restrictedAreaShrinked.top, newView.center.y, restrictedAreaShrinked.bottom);
              delta = newView.center.subtract(previousCenter);
            }
          }
        }
        if (this.previousPosition == null) {
          this.previousPosition = P.view.center;
        }
        P.view.scrollBy(new P.Point(delta.x, delta.y));
        this.updateSVG();
        ref = R.divs;
        for (i = 0, len = ref.length; i < len; i++) {
          div = ref[i];
          div.updateTransform();
        }
        R.rasterizer.move();
        this.grid.update();
        newEntireArea = null;
        ref1 = this.entireAreas;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          area = ref1[j];
          if (area.getBounds().contains(P.view.center)) {
            newEntireArea = area;
            break;
          }
        }
        if ((this.entireArea == null) && (newEntireArea != null)) {
          this.entireArea = newEntireArea.getBounds();
        } else if ((this.entireArea != null) && (newEntireArea == null)) {
          this.entireArea = null;
        }
        somethingToLoad = false;
        R.socket.updateRoom();
        Utils.deferredExecution(this.updateHash, 'updateHash', 500);
        R.controllerManager.folders['General'].controllers['location'].setValue('' + P.view.center.x.toFixed(2) + ',' + P.view.center.y.toFixed(2));
        return somethingToLoad;
      };

      View.prototype.fitRectangle = function(rectangle, considerPanels, zoom) {
        var drawingPanelWidth, offset, rectangleRatio, sidebarWidth, viewRatio, visibleViewCenterInView, windowCenterInView, windowSize;
        if (considerPanels == null) {
          considerPanels = false;
        }
        if (zoom == null) {
          zoom = null;
        }
        windowSize = new P.Size(window.innerWidth, window.innerHeight);
        if (window.innerWidth < 600) {
          considerPanels = false;
        }
        sidebarWidth = considerPanels && R.sidebar.isOpened() ? R.sidebar.sidebarJ.outerWidth() : 0;
        drawingPanelWidth = considerPanels && R.drawingPanel.isOpened() ? R.drawingPanel.drawingPanelJ.outerWidth() : 0;
        windowSize.width = windowSize.width - sidebarWidth - drawingPanelWidth;
        viewRatio = windowSize.width / windowSize.height;
        rectangleRatio = rectangle.width / rectangle.height;
        if (zoom == null) {
          if (viewRatio < rectangleRatio) {
            P.view.zoom = Math.min(windowSize.width / rectangle.width, 1);
          } else {
            P.view.zoom = Math.min(windowSize.height / rectangle.height, 1);
          }
        } else {
          P.view.zoom = zoom;
        }
        if (considerPanels) {
          windowCenterInView = P.view.viewToProject(new P.Point(window.innerWidth / 2, window.innerHeight / 2));
          visibleViewCenterInView = P.view.viewToProject(new P.Point(sidebarWidth + windowSize.width / 2, window.innerHeight / 2));
          offset = visibleViewCenterInView.subtract(windowCenterInView);
          this.moveTo(rectangle.center.subtract(offset));
        } else {
          this.moveTo(rectangle.center);
        }
        this.updateSVG();
      };

      View.prototype.updateSVG = function() {
        var transform;
        if (R.svgJ != null) {
          transform = Utils.getSVGTransform(P.view.matrix);
          R.svgJ.find('g:first').attr('transform', transform.transform);
        }
      };

      View.prototype.addMoveCommand = function() {
        R.commandManager.add(new Command.MoveView(this.previousPosition, P.view.center));
        this.previousPosition = null;
      };

      View.prototype.updateHash = function() {
        var hashParameters;
        this.ignoreHashChange = true;
        hashParameters = {};
        if (R.repository.commit != null) {
          hashParameters['repository-owner'] = R.repository.owner;
          hashParameters['repository-commit'] = R.repository.commit;
        }
        if ((R.city.name != null) && R.city.name !== 'CommeUnDessein') {
          hashParameters['mode'] = R.city.name;
        }
        hashParameters['location'] = Utils.pointToString(P.view.center);
        if (R.tipibot != null) {
          hashParameters['tipibot'] = true;
        }
        if (R.style != null) {
          hashParameters['style'] = R.style;
        }
        location.hash = Utils.URL.setParameters(hashParameters);
      };

      View.prototype.setPositionFromString = function(positionString) {
        this.moveTo(Utils.stringToPoint(positionString));
      };

      View.prototype.onHashChange = function(event, reloadIfNecessary) {
        var mustReload, p, parameters;
        if (reloadIfNecessary == null) {
          reloadIfNecessary = true;
        }
        if (this.ignoreHashChange) {
          this.ignoreHashChange = false;
          return;
        }
        parameters = Utils.URL.getParameters(document.location.hash);
        if ((R.repository.commit != null) && (R.repository.owner !== parameters['repository-owner'] || R.repository.commit !== parameters['repository-commit'])) {
          location.reload();
          return;
        }
        if (parameters['location'] != null) {
          p = Utils.stringToPoint(parameters['location']);
        }
        mustReload = false;
        if (parameters['mode'] != null) {
          mustReload = parameters['mode'] !== R.city.name;
          R.city.name = parameters['mode'];
        }
        R.tipibot = parameters['tipibot'];
        mustReload |= parameters['style'] !== R.style;
        R.style = parameters['style'];
        this.moveTo(p, null, !this.firstHashChange, this.firstHashChange);
        this.firstHashChange = true;
        if (reloadIfNecessary && mustReload) {
          window.location.reload();
        }
      };

      View.prototype.initializePosition = function() {
        var boxRectangle, br, controller, folder, folderName, i, len, planet, pos, ref, ref1, site, siteString, tl;
        R.city = {
          owner: R.canvasJ.attr("data-owner") !== '' ? R.canvasJ.attr("data-owner") : void 0,
          city: R.canvasJ.attr("data-city") !== '' ? R.canvasJ.attr("data-city") : void 0,
          site: R.canvasJ.attr("data-site") !== '' ? R.canvasJ.attr("data-site") : void 0
        };
        this.restrictedArea = this.grid.limitCD.bounds.expand(100);
        P.view.zoom = 0.5;
        P.view.scrollBy(1, 1);
        R.svgJ = $(P.project.exportSVG());
        R.svgJ.insertAfter(R.canvasJ);
        if (R.loadedBox == null) {
          if (typeof window !== "undefined" && window !== null) {
            window.onhashchange(null, false);
          }
          return;
        }
        planet = new P.Point(R.loadedBox.planetX, R.loadedBox.planetY);
        tl = Utils.CS.posOnPlanetToProject(R.loadedBox.box.coordinates[0][0], planet);
        br = Utils.CS.posOnPlanetToProject(R.loadedBox.box.coordinates[0][2], planet);
        boxRectangle = new P.Rectangle(tl, br);
        pos = boxRectangle.center;
        this.moveTo(pos);
        if (R.loadEntireArea) {
          this.entireArea = boxRectangle;
          R.loader.load(boxRectangle);
        }
        siteString = R.canvasJ.attr("data-site");
        site = JSON.parse(siteString);
        if (site.restrictedArea) {
          this.restrictedArea = boxRectangle;
        }
        R.tools.select.select();
        if (site.disableToolbar) {
          R.sidebar.hide();
        } else {
          R.sidebar.sidebarJ.find("div.panel.panel-default:not(:last)").hide();
          ref = R.gui.__folders;
          for (folderName in ref) {
            folder = ref[folderName];
            ref1 = folder.__controllers;
            for (i = 0, len = ref1.length; i < len; i++) {
              controller = ref1[i];
              if (controller.name !== 'Zoom') {
                folder.remove(controller);
                folder.__controllers.remove(controller);
              }
            }
            if (folder.__controllers.length === 0) {
              R.gui.removeFolder(folderName);
            }
          }
          R.sidebar.handleJ.click();
        }
      };

      View.prototype.focusIsOnCanvas = function() {
        return $(document.activeElement).is("body");
      };

      View.prototype.onMouseDown = function(event) {
        var ref, ref1;
        if ((ref = R.wacomPenAPI) != null ? ref.isEraser : void 0) {
          this.tool.onKeyUp({
            key: 'delete'
          });
          return;
        }
        $(document.activeElement).blur();
        if ((ref1 = R.selectedTool) != null) {
          ref1.begin(event);
        }
      };

      View.prototype.onMouseDrag = function(event) {
        var ref, ref1;
        if ((ref = R.wacomPenAPI) != null ? ref.isEraser : void 0) {
          return;
        }
        if (R.currentDiv != null) {
          return;
        }
        if ((ref1 = R.selectedTool) != null) {
          ref1.update(event);
        }
      };

      View.prototype.onMouseUp = function(event) {
        var ref, ref1;
        if ((ref = R.wacomPenAPI) != null ? ref.isEraser : void 0) {
          return;
        }
        if (R.currentDiv != null) {
          return;
        }
        if ((ref1 = R.selectedTool) != null) {
          ref1.end(event);
        }
      };

      View.prototype.onKeyDown = function(event) {
        var ref;
        if (!this.focusIsOnCanvas()) {
          return;
        }
        if (event.key === 'delete') {
          event.preventDefault();
          return false;
        }
        if (event.key === 'space' && ((ref = R.selectedTool) != null ? ref.name : void 0) !== 'Move') {
          R.tools.move.select();
        }
      };

      View.prototype.onKeyUp = function(event) {
        var ref, ref1;
        if (!this.focusIsOnCanvas()) {
          return;
        }
        if ((ref = R.selectedTool) != null) {
          ref.keyUp(event);
        }
        switch (event.key) {
          case 'space':
            if ((ref1 = R.previousTool) != null) {
              ref1.select();
            }
            break;
          case 'v':
            R.tools.select.select();
            break;
          case 't':
            R.showToolBox();
            break;
          case 'r':
            if (event.modifiers.shift) {
              R.rasterizer.rasterizeImmediately();
            }
        }
        event.preventDefault();
      };

      View.prototype.onFrame = function(event) {
        var i, item, len, ref, ref1, ref2;
        TWEEN.update(event.time);
        if ((ref = R.rasterizer) != null) {
          if (typeof ref.updateLoadingBar === "function") {
            ref.updateLoadingBar(event.time);
          }
        }
        if ((ref1 = R.selectedTool) != null) {
          if (typeof ref1.onFrame === "function") {
            ref1.onFrame(event);
          }
        }
        ref2 = R.animatedItems;
        for (i = 0, len = ref2.length; i < len; i++) {
          item = ref2[i];
          item.onFrame(event);
        }
      };

      View.prototype.onWindowResize = function(event) {
        this.grid.update();
        $(".mCustomScrollbar").mCustomScrollbar("update");
        this.moveBy(new P.Point());
        P.view.viewSize = new P.Size(R.stageJ.innerWidth(), R.stageJ.innerHeight());
      };

      View.prototype.mousedown = function(event) {
        var moveButton, ref, ref1, ref2;
        moveButton = event instanceof MouseEvent ? 2 : (typeof TouchEvent !== "undefined" && TouchEvent !== null) && event instanceof TouchEvent ? 0 : 2;
        switch (event.which) {
          case moveButton:
            R.tools.move.select();
            break;
          case 3:
            if ((ref = R.selectedTool) != null) {
              if (typeof ref.finish === "function") {
                ref.finish();
              }
            }
        }
        if (((ref1 = R.selectedTool) != null ? ref1.name : void 0) === 'Move') {
          if ((ref2 = R.selectedTool) != null) {
            ref2.beginNative(event);
          }
          return;
        }
        this.initialMousePosition = Utils.Event.jEventToPoint(event);
        this.previousMousePosition = this.initialMousePosition.clone();
      };

      View.prototype.mousemove = function(event) {
        var base, paperEvent, ref, ref1, ref2, ref3, ref4;
        this.mousePosition.set(Utils.Event.GetPoint(event));
        if (((ref = R.selectedTool) != null ? ref.name : void 0) === 'Move' && R.selectedTool.dragging) {
          R.selectedTool.updateNative(event);
          return;
        }
        if (((ref1 = R.selectedTool) != null ? ref1.name : void 0) === 'Select') {
          paperEvent = Utils.Event.jEventToPaperEvent(event, this.previousMousePosition, this.initialMousePosition, 'mousemove');
          if ((ref2 = R.selectedTool) != null) {
            if (typeof ref2.move === "function") {
              ref2.move(paperEvent);
            }
          }
        }
        Div.updateHiddenDivs(event);
        if ((ref3 = R.codeEditor) != null) {
          ref3.onMouseMove(event);
        }
        if ((ref4 = R.drawingPanel) != null) {
          ref4.onMouseMove(event);
        }
        if (R.currentDiv != null) {
          paperEvent = Utils.Event.jEventToPaperEvent(event, this.previousMousePosition, this.initialMousePosition, 'mousemove');
          if (typeof (base = R.currentDiv).updateSelect === "function") {
            base.updateSelect(paperEvent);
          }
          this.previousMousePosition = paperEvent.point;
        }
      };

      View.prototype.mouseup = function(event) {
        var base, paperEvent, ref, ref1, ref2, ref3;
        if (R.stageJ.hasClass("has-tool-box") && !$(event.target).parents('.tool-box').length > 0) {
          R.hideToolBox();
        }
        if (!$(event.target).parents('#CommeUnDessein_alerts').length > 0) {
          R.alertManager.hideIfNoTimeout();
        }
        if ((ref = R.codeEditor) != null) {
          ref.onMouseUp(event);
        }
        if ((ref1 = R.drawingPanel) != null) {
          ref1.onMouseUp(event);
        }
        if (((ref2 = R.selectedTool) != null ? ref2.name : void 0) === 'Move') {
          R.selectedTool.endNative(event);
          if (event.which === 2) {
            if ((ref3 = R.previousTool) != null) {
              ref3.select(null, null, null, true);
            }
          }
          return;
        }
        if (R.currentDiv != null) {
          paperEvent = Utils.Event.jEventToPaperEvent(event, this.previousMousePosition, this.initialMousePosition, 'mouseup');
          if (typeof (base = R.currentDiv).endSelect === "function") {
            base.endSelect(paperEvent);
          }
          this.previousMousePosition = paperEvent.point;
        }
      };

      View.prototype.mousewheel = function(event) {
        this.moveBy(new P.Point(-event.deltaX, event.deltaY));
      };

      return View;

    })();
    return View;
  });

}).call(this);
