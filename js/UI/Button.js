// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['paper', 'R', 'Utils/Utils', 'Tools/Tool', 'i18next'], function(P, R, Utils, Tool, i18next) {
    var Button;
    Button = (function() {
      function Button(parameters) {
        this.onClickWhenLoaded = bind(this.onClickWhenLoaded, this);
        this.onClickWhenNotLoaded = bind(this.onClickWhenNotLoaded, this);
        this.fileLoaded = bind(this.fileLoaded, this);
        var categories, category, classes, favorite, favoriteBtnJ, hJ, i, iconRootURL, iconURL, j, len, len1, liJ, name, onClick, order, parentJ, shortName, shortNameJ, toolNameJ, ulJ, word, words;
        name = parameters.name;
        iconURL = parameters.iconURL;
        favorite = parameters.favorite;
        category = parameters.category;
        order = parameters.order;
        classes = parameters.classes;
        this.file = parameters.file;
        onClick = parameters.onClick;
        parentJ = R.sidebar.allToolsJ;
        if ((category != null) && category !== "") {
          categories = category.split("/");
          for (i = 0, len = categories.length; i < len; i++) {
            category = categories[i];
            ulJ = parentJ.find("li[data-name='" + category + "'] > ul");
            if (ulJ.length === 0) {
              liJ = $("<li data-name='" + category + "'>");
              liJ.addClass('category');
              hJ = $('<h6>');
              hJ.text(category).addClass("title");
              liJ.append(hJ);
              ulJ = $("<ul>");
              ulJ.addClass('folder');
              liJ.append(ulJ);
              hJ.click(this.toggleCategory);
              parentJ.append(liJ);
            }
            parentJ = ulJ;
          }
        }
        this.btnJ = $("<li>");
        this.btnJ.attr("data-name", name);
        this.btnJ.attr("alt", name);
        if ((classes != null) && classes.length > 0) {
          this.btnJ.addClass(classes);
        }
        if ((iconURL != null) && iconURL !== '') {
          if (iconURL.indexOf('glyphicon') === 0) {
            this.btnJ.append('<span class="glyphicon ' + iconURL + '" alt="' + name + '-icon">');
            if (parameters.transform != null) {
              this.btnJ.find('span.glyphicon').css({
                transform: parameters.transform
              });
            }
          } else {
            iconRootURL = 'static/images/icons/inverted/';
            if (iconURL.indexOf('//') < 0 && iconURL.indexOf(iconRootURL) < 0) {
              iconURL = iconRootURL + iconURL;
            }
            if (iconURL.indexOf(iconRootURL) === 0) {
              iconURL = location.origin + '/' + iconURL;
            }
            this.btnJ.append('<img src="' + iconURL + '" alt="' + name + '-icon">');
          }
        } else {
          this.btnJ.addClass("text-btn");
          words = name.split(" ");
          shortName = "";
          if (words.length > 1) {
            for (j = 0, len1 = words.length; j < len1; j++) {
              word = words[j];
              shortName += word.substring(0, 1);
            }
          } else {
            shortName += name.substring(0, 2);
          }
          shortNameJ = $('<span class="short-name">').text(shortName + ".");
          this.btnJ.append(shortNameJ);
        }
        parentJ.append(this.btnJ);
        toolNameJ = $('<span class="tool-name">');
        toolNameJ.attr('data-i18n', name).text(i18next.t(name));
        this.btnJ.append(toolNameJ);
        this.btnJ.addClass("tool-btn");
        favoriteBtnJ = $("<button type=\"button\" class=\"btn btn-default favorite-btn\">\n	  			<span class=\"glyphicon glyphicon-star\" aria-hidden=\"true\"></span>\n</button>");
        favoriteBtnJ.click(R.sidebar.toggleToolToFavorite);
        this.btnJ.append(favoriteBtnJ);
        this.btnJ.attr({
          'data-order': order != null ? order : 999
        });
        if (onClick != null) {
          this.btnJ.click(onClick);
        } else {
          this.btnJ.click(this.file != null ? this.onClickWhenNotLoaded : this.onClickWhenLoaded);
        }
        if (favorite) {
          R.sidebar.toggleToolToFavorite(null, this.btnJ, this);
        }
        if ((parameters.description != null) || parameters.popover) {
          this.addPopover(parameters);
        }
        if (parameters.preload) {
          this.onClickWhenNotLoaded();
        }
        return;
      }

      Button.prototype.addPopover = function(parameters) {
        this.btnJ.attr('data-placement', 'bottom');
        this.btnJ.attr('data-container', 'body');
        this.btnJ.attr('data-trigger', 'hover');
        this.btnJ.attr('data-delay', {
          show: 500,
          hide: 100
        });
        if ((parameters.description == null) || parameters.description === '') {
          this.btnJ.attr('data-content', parameters.name);
        } else {
          this.btnJ.attr('data-title', parameters.name);
          this.btnJ.attr('data-content', parameters.description);
        }
        this.btnJ.popover();
      };

      Button.prototype.toggleCategory = function(event) {
        var categoryJ;
        categoryJ = $(this).parent();
        categoryJ.toggleClass('closed');
        categoryJ.children('.folder').children().show();
      };

      Button.prototype.fileLoaded = function() {
        this.btnJ.off('click');
        this.btnJ.click(this.onClickWhenLoaded);
        this.onClickWhenLoaded();
      };

      Button.prototype.onClickWhenNotLoaded = function(event) {
        require([this.file], this.fileLoaded);
      };

      Button.prototype.onClickWhenLoaded = function(event) {
        var ref, toolName;
        toolName = this.btnJ.attr("data-name");
        if ((ref = R.tools[toolName]) != null) {
          ref.select();
        }
      };

      return Button;

    })();
    return Button;
  });

}).call(this);
