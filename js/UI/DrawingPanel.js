// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['paper', 'R', 'Utils/Utils', 'Items/Item', 'UI/Modal', 'Commands/Command', 'i18next', 'moment', 'facebook'], function(P, R, Utils, Item, Modal, Command, i18next, moment, fb) {
    var DrawingPanel;
    DrawingPanel = (function() {
      function DrawingPanel() {
        this.cancelDrawing = bind(this.cancelDrawing, this);
        this.modifyDrawing = bind(this.modifyDrawing, this);
        this.submitDrawing = bind(this.submitDrawing, this);
        this.voteDown = bind(this.voteDown, this);
        this.voteUp = bind(this.voteUp, this);
        this.vote = bind(this.vote, this);
        this.voteCallback = bind(this.voteCallback, this);
        this.submitDrawingClicked = bind(this.submitDrawingClicked, this);
        this.beginDrawingClicked = bind(this.beginDrawingClicked, this);
        this.showContent = bind(this.showContent, this);
        this.showLoadAnimation = bind(this.showLoadAnimation, this);
        this.close = bind(this.close, this);
        this.updateSelection = bind(this.updateSelection, this);
        this.onMouseUp = bind(this.onMouseUp, this);
        this.setFullSize = bind(this.setFullSize, this);
        this.setHalfSize = bind(this.setHalfSize, this);
        this.onHandleDown = bind(this.onHandleDown, this);
        this.shareOnTwitter = bind(this.shareOnTwitter, this);
        this.shareOnFacebook = bind(this.shareOnFacebook, this);
        this.submitComment = bind(this.submitComment, this);
        var closeBtnJ, handleJ, onSubmitDown, onSubmitUp, runBtnJ, titleJ;
        this.drawingPanelJ = $("#drawingPanel");
        this.contentJ = this.drawingPanelJ.find('.content-container');
        FB.init({
          appId: '263330707483013',
          version: 'v2.10'
        });
        FB.getLoginStatus((function(_this) {
          return function(response) {
            return console.log(response);
          };
        })(this));
        this.contentJ.find('.share-facebook').click(this.shareOnFacebook);
        this.contentJ.find('button.share-twitter').click(this.shareOnTwitter);
        this.beginDrawingBtnJ = $('button.begin-drawing');
        this.beginDrawingBtnJ.click(this.beginDrawingClicked);
        this.submitDrawingBtnJ = $('button.submit-drawing');
        this.submitDrawingBtnJ.click(this.submitDrawingClicked);
        this.drawingPanelJ.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd", this.resize);
        this.thumbnailFooterTitle = this.drawingPanelJ.find(".thumbnail-footer .title");
        this.thumbnailFooterAuthor = this.drawingPanelJ.find(".thumbnail-footer .author");
        handleJ = this.drawingPanelJ.find(".panel-handle");
        handleJ.mousedown(this.onHandleDown);
        handleJ.find('.handle-right').click(this.setHalfSize);
        handleJ.find('.handle-left').click(this.setFullSize);
        this.drawingPanelTitleJ = this.drawingPanelJ.find('.drawing-panel-title');
        this.fileNameJ = this.drawingPanelJ.find(".header .fileName input");
        this.linkFileInputJ = this.drawingPanelJ.find("input.link-file");
        this.linkFileInputJ.change(this.linkFile);
        closeBtnJ = this.drawingPanelJ.find("button.close-panel");
        closeBtnJ.click(this.close);
        this.votesJ = this.drawingPanelJ.find('.votes');
        runBtnJ = this.drawingPanelJ.find("button.submit.run");
        runBtnJ.click(this.runFile);
        this.voteUpBtnJ = this.drawingPanelJ.find('.vote-up');
        this.voteUpBtnJ.click(this.voteUp);
        this.voteDownBtnJ = this.drawingPanelJ.find('.vote-down');
        this.voteDownBtnJ.click(this.voteDown);
        this.submitBtnJ = this.drawingPanelJ.find('.action-buttons button.submit');
        this.modifyBtnJ = this.drawingPanelJ.find('.action-buttons button.modify');
        this.cancelBtnJ = this.drawingPanelJ.find('.action-buttons button.cancel');
        this.submitBtnJ.click(this.submitDrawing);
        this.modifyBtnJ.click(this.modifyDrawing);
        this.cancelBtnJ.click(this.cancelDrawing);
        this.visible = false;
        titleJ = this.contentJ.find('#drawing-title');
        onSubmitUp = (function(_this) {
          return function(event) {
            if (Utils.specialKeys[event.keyCode] === 'enter') {
              _this.submitDrawing();
              event.preventDefault();
              event.stopPropagation();
              return -1;
            }
          };
        })(this);
        onSubmitDown = (function(_this) {
          return function(event) {
            if (Utils.specialKeys[event.keyCode] === 'enter') {
              event.preventDefault();
              event.stopPropagation();
              return -1;
            }
          };
        })(this);
        titleJ.keydown(onSubmitDown).keyup(onSubmitUp);
        this.contentJ.find('.comments-container .comment-area').keydown((function(_this) {
          return function(event) {
            if (Utils.specialKeys[event.keyCode] === 'enter' && !(event.shiftKey || event.metaKey || event.ctrlKey)) {
              _this.submitComment();
              event.preventDefault();
              event.stopPropagation();
              return -1;
            }
          };
        })(this));
        this.contentJ.find('.comments-container .submit-comment').click(this.submitComment);
        return;
      }

      DrawingPanel.prototype.submitComment = function() {
        var args, comment, commentAreaJ;
        commentAreaJ = this.contentJ.find('.comments-container .comment-area');
        comment = commentAreaJ.get(0).innerText;
        if (comment.length === 0) {
          return;
        }
        commentAreaJ.get(0).innerText = '';
        args = {
          drawingPk: this.currentDrawing.pk,
          comment: comment,
          date: Date.now()
        };
        $.ajax({
          method: "POST",
          url: "ajaxCall/",
          data: {
            data: JSON.stringify({
              "function": 'addComment',
              args: args
            })
          }
        }).done((function(_this) {
          return function(results) {
            var c, lastId;
            if (!R.loader.checkError(results)) {
              return;
            }
            c = JSON.parse(results.comment);
            lastId = _this.addComment(comment, results.commentPk, results.author, c.date.$date);
            R.socket.emit("drawing change", {
              type: 'addComment',
              comment: comment,
              commentPk: results.commentPk,
              author: results.author,
              date: c.date.$date,
              drawingPk: c.drawing.$oid,
              insertAfter: lastId
            });
          };
        })(this));
      };

      DrawingPanel.prototype.addComment = function(comment, commentPk, author, date, insertAfter) {
        var buttonsJ, deleteBtnJ, deleteIconJ, divJ, editBtnJ, editIconJ, headerJ, lastId, textJ;
        if (insertAfter == null) {
          insertAfter = null;
        }
        divJ = $('<div>').addClass('cd-column cd-grow comment');
        divJ.attr('id', 'comment-' + commentPk);
        headerJ = $('<div>');
        headerJ.addClass('cd-row comment-header').addClass('cd-row cd-grow');
        headerJ.append($('<span>').addClass('author').text(author));
        headerJ.append($('<span>').addClass('date').text(' - ' + moment(date).format('l - LT')));
        if (author === R.me || R.administrator) {
          buttonsJ = $('<div>').addClass('cd-row cd-grow cd-end edit-buttons');
          editBtnJ = $('<button>');
          editBtnJ.addClass('btn btn-default icon-only transparent');
          editIconJ = $('<span>').addClass('glyphicon glyphicon-pencil');
          editBtnJ.click((function(_this) {
            return function(event) {
              _this.exitCommentEditMode(_this.currentCommentPk);
              _this.editComment(commentPk);
              event.preventDefault();
              event.stopPropagation();
              return -1;
            };
          })(this));
          editBtnJ.append(editIconJ);
          buttonsJ.append(editBtnJ);
          deleteBtnJ = $('<button>');
          deleteBtnJ.addClass('btn btn-default icon-only transparent');
          deleteIconJ = $('<span>').addClass('glyphicon glyphicon-remove');
          deleteBtnJ.click((function(_this) {
            return function(event) {
              _this.deleteComment(commentPk);
              event.preventDefault();
              event.stopPropagation();
              return -1;
            };
          })(this));
          deleteBtnJ.append(deleteIconJ);
          buttonsJ.append(deleteBtnJ);
          headerJ.append(buttonsJ);
        }
        divJ.append(headerJ);
        textJ = $('<div>').addClass('cd-grow comment-text');
        textJ.get(0).innerText = comment;
        divJ.append(textJ);
        lastId = this.contentJ.find('.comments-container .comments .comment:last-child').attr('id');
        if (insertAfter != null) {
          divJ.insertAfter(this.contentJ.find('#' + insertAfter));
        } else {
          this.contentJ.find('.comments-container .comments').append(divJ);
        }
        return lastId;
      };

      DrawingPanel.prototype.emptyComments = function() {
        this.contentJ.find('.comments-container .comments').empty();
      };

      DrawingPanel.prototype.addComments = function(comments) {
        var author, authorPk, c, comment, i, len;
        for (i = 0, len = comments.length; i < len; i++) {
          comment = comments[i];
          c = JSON.parse(comment.comment);
          author = comment.author;
          authorPk = comment.authorPk;
          this.addComment(c.text, c._id.$oid, author, c.date.$date);
        }
      };

      DrawingPanel.prototype.deleteComment = function(commentPk) {
        this.contentJ.find('.comments-container #comment-' + commentPk).remove();
        $.ajax({
          method: "POST",
          url: "ajaxCall/",
          data: {
            data: JSON.stringify({
              "function": 'deleteComment',
              args: {
                commentPk: commentPk
              }
            })
          }
        }).done(function(results) {
          if (!R.loader.checkError(results)) {
            return;
          }
          R.socket.emit("drawing change", {
            type: 'deleteComment',
            commentPk: results.commentPk,
            drawingPk: results.drawingPk
          });
        });
      };

      DrawingPanel.prototype.exitCommentEditMode = function(commentPk) {
        var commentJ, textJ;
        if (commentPk == null) {
          return;
        }
        this.currentCommentPk = null;
        commentJ = this.contentJ.find('.comments-container #comment-' + commentPk);
        commentJ.find('.comment-buttons').remove();
        commentJ.find('.edit-buttons').show();
        textJ = commentJ.find('.comment-text');
        textJ.removeAttr('contenteditable');
      };

      DrawingPanel.prototype.validateCommentEdit = function(commentPk) {
        var comment, commentJ;
        commentJ = this.contentJ.find('.comments-container #comment-' + commentPk);
        comment = commentJ.find('.comment-text').get(0).innerText;
        this.exitCommentEditMode(commentPk);
        $.ajax({
          method: "POST",
          url: "ajaxCall/",
          data: {
            data: JSON.stringify({
              "function": 'modifyComment',
              args: {
                commentPk: commentPk,
                comment: comment
              }
            })
          }
        }).done(function(results) {
          if (!R.loader.checkError(results)) {
            return;
          }
          R.socket.emit("drawing change", {
            type: 'modifyComment',
            comment: comment,
            commentPk: results.commentPk,
            drawingPk: results.drawingPk
          });
        });
      };

      DrawingPanel.prototype.editComment = function(commentPk) {
        var cancelBtnJ, commentJ, editButtonsJ, initialComment, okBtnJ, textJ;
        this.currentCommentPk = commentPk;
        commentJ = this.contentJ.find('.comments-container #comment-' + commentPk);
        commentJ.find('.edit-buttons').hide();
        textJ = commentJ.find('.comment-text');
        initialComment = textJ.get(0).innerText;
        textJ.attr('contenteditable', 'true');
        editButtonsJ = $('<div>').addClass('comment-buttons cd-row cd-end');
        okBtnJ = $('<button>').addClass('comment-button').attr('data-i18n', 'Modify comment').text(i18next.t('Modify comment'));
        okBtnJ.addClass('btn btn-default');
        okBtnJ.click((function(_this) {
          return function(event) {
            _this.validateCommentEdit(commentPk);
          };
        })(this));
        cancelBtnJ = $('<button>').addClass('comment-button').attr('data-i18n', 'Cancel').text(i18next.t('Cancel'));
        cancelBtnJ.addClass('btn btn-default');
        cancelBtnJ.click((function(_this) {
          return function(event) {
            commentJ.find('.comment-text').get(0).innerText = initialComment;
            _this.exitCommentEditMode(commentPk);
          };
        })(this));
        editButtonsJ.append(cancelBtnJ);
        editButtonsJ.append(okBtnJ);
        commentJ.append(editButtonsJ);
        textJ.focus().select().keydown((function(_this) {
          return function(event) {
            if (Utils.specialKeys[event.keyCode] === 'enter' && !(event.shiftKey || event.metaKey || event.ctrlKey)) {
              _this.validateCommentEdit(commentPk);
              event.preventDefault();
              event.stopPropagation();
              return -1;
            }
          };
        })(this));
        textJ.on('blur', (function(_this) {
          return function(event) {
            _this.exitCommentEditMode(commentPk);
          };
        })(this));
      };

      DrawingPanel.prototype.shareOnFacebook = function(event) {
        var bounds;
        bounds = this.currentDrawing.getBounds();
        if (bounds != null) {
          R.view.fitRectangle(bounds, true);
          R.view.updateHash();
        }
        FB.ui({
          method: 'feed',
          caption: i18next.t('Vote for this drawing on Comme un Dessein', {
            drawing: this.currentDrawing.title,
            author: this.currentDrawing.owner
          }),
          link: location.origin + '/drawing-' + this.currentDrawing.pk
        }, (function(response) {
          console.log(response);
        }));
      };

      DrawingPanel.prototype.shareOnTwitter = function(event) {
        var twitterHashTags, twitterLink, twitterText, twitterURL;
        twitterText = '' + this.currentDrawing.title + ' ' + i18next.t('by') + ' ' + this.currentDrawing.owner + ', ' + i18next.t('on') + ' Comme un Dessein';
        twitterURL = location.origin + '/drawing-' + this.currentDrawing.pk;
        twitterHashTags = 'CommeUnDessein,idlv,Maintenant2017';
        twitterLink = 'http://twitter.com/share?text=' + twitterText + '&url=' + twitterURL + '&hashtags=' + twitterHashTags;
        window.open(twitterLink, 'popup', 'width=600, height=400');
      };


      /* mouse interaction */

      DrawingPanel.prototype.onHandleDown = function() {
        this.draggingEditor = true;
      };

      DrawingPanel.prototype.setHalfSize = function() {
        this.drawingPanelJ.css({
          left: '70%'
        });
        this.resize();
      };

      DrawingPanel.prototype.setFullSize = function() {
        this.drawingPanelJ.css({
          left: '265px'
        });
        this.resize();
      };

      DrawingPanel.prototype.onWindowResize = function() {
        var height, width;
        width = this.drawingPanelJ.outerWidth();
        height = this.drawingPanelJ.outerHeight();
        if (width > height) {
          this.drawingPanelJ.find('.cd-column-row').addClass('cd-row').removeClass('cd-column');
        } else {
          this.drawingPanelJ.find('.cd-column-row').addClass('cd-column').removeClass('cd-row');
        }
      };

      DrawingPanel.prototype.onMouseMove = function(event) {
        var point;
        if (this.draggingEditor) {
          point = Utils.Event.GetPoint(event);
          this.drawingPanelJ.css({
            left: Math.max(265, point.x)
          });
        }
      };

      DrawingPanel.prototype.onMouseUp = function(event) {
        this.draggingEditor = false;
      };

      DrawingPanel.prototype.updateSelection = function() {
        var drawing;
        if (R.selectedItems.length === 1) {
          if (R.selectedItems[0].status === 'draft') {
            this.submitDrawingClicked();
            return;
          }
          this.showLoadAnimation();
          this.open();
          drawing = R.selectedItems[0];
          if (drawing.pk != null) {
            delete drawing.selectAfterSave;
            drawing.updateDrawingPanel();
          } else {
            drawing.selectAfterSave = true;
          }
        } else if (R.selectedItems.length > 0) {
          this.showSelectedDrawings();
          this.open();
        }
      };

      DrawingPanel.prototype.selectionChanged = function() {
        Utils.callNextFrame(this.updateSelection, 'update drawing selection');
      };

      DrawingPanel.prototype.deselectDrawing = function(drawing) {
        if (R.selectedItems.length === 0) {
          this.close();
        }
        if (drawing === this.currentDrawing) {
          this.currentDrawing = null;
        }
      };


      /* open close */

      DrawingPanel.prototype.isOpened = function() {
        return this.drawingPanelJ.hasClass('visible');
      };

      DrawingPanel.prototype.open = function() {
        this.onWindowResize();
        this.drawingPanelJ.show();
        this.drawingPanelJ.addClass('visible');
        this.visible = true;
        R.toolManager.updateButtonsVisibility();
      };

      DrawingPanel.prototype.close = function(removeDrawingIfNotSaved) {
        if (removeDrawingIfNotSaved == null) {
          removeDrawingIfNotSaved = true;
        }
        this.drawingPanelJ.hide();
        this.drawingPanelJ.removeClass('visible');
        this.visible = false;
        if (R.selectedItems.length > 0) {
          this.currentDrawing = null;
          R.tools.select.deselectAll();
        }
        R.toolManager.updateButtonsVisibility();
      };


      /* set drawing */

      DrawingPanel.prototype.createSelectionLi = function(selectedDrawingsJ, listJ, item) {
        var contentJ, deselectBtnJ, deselectIconJ, liJ, svg, thumbnailJ, titleJ;
        liJ = $('<li>');
        liJ.addClass('drawing-selection cd-button');
        liJ.addClass('cd-row');
        contentJ = $('<div>');
        contentJ.addClass('cd-column cd-grow');
        titleJ = $('<h4>');
        titleJ.addClass('cd-grow cd-center');
        titleJ.html(item.title);
        thumbnailJ = $('<div>');
        thumbnailJ.addClass('thumbnail drawing-thumbnail');
        svg = R.view.getThumbnail(item);
        svg.setAttribute('viewBox', '0 0 300 300');
        svg.setAttribute('width', '250');
        svg.setAttribute('height', '250');
        thumbnailJ.append(svg);
        deselectBtnJ = $('<button>');
        deselectBtnJ.addClass('btn btn-default icon-only transparent');
        deselectIconJ = $('<span>').addClass('glyphicon glyphicon-remove');
        deselectBtnJ.click(function(event) {
          item.deselect();
          liJ.remove();
          event.preventDefault();
          event.stopPropagation();
          return -1;
        });
        deselectBtnJ.append(deselectIconJ);
        contentJ.append(titleJ);
        contentJ.append(thumbnailJ);
        liJ.append(contentJ);
        liJ.append(deselectBtnJ);
        liJ.click(function() {
          selectedDrawingsJ.hide();
          listJ.empty();
          R.tools.select.deselectAll();
          item.select();
        });
        listJ.append(liJ);
      };

      DrawingPanel.prototype.showSelectedDrawings = function() {
        var i, item, len, listJ, ref, selectedDrawingsJ;
        this.drawingPanelTitleJ.attr('data-i18n', 'Select a single drawing').text(i18next.t('Select a single drawing'));
        this.drawingPanelJ.find('.content-container').children().hide();
        selectedDrawingsJ = this.drawingPanelJ.find('.selected-drawings');
        selectedDrawingsJ.show();
        listJ = selectedDrawingsJ.find('ul.drawing-list');
        listJ.empty();
        ref = R.selectedItems;
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          if (item instanceof Item.Drawing) {
            this.createSelectionLi(selectedDrawingsJ, listJ, item);
          }
        }
      };

      DrawingPanel.prototype.showLoadAnimation = function() {
        this.drawingPanelJ.find('.loading-animation').show();
        this.drawingPanelJ.find('.content').hide();
        this.drawingPanelJ.find('.selected-drawings').hide();
      };

      DrawingPanel.prototype.showContent = function() {
        this.drawingPanelJ.find('.content').show();
        this.drawingPanelJ.find('.selected-drawings').hide();
        this.drawingPanelJ.find('.loading-animation').hide();
      };

      DrawingPanel.prototype.showSubmitDrawing = function() {
        this.hideBeginDrawing();
        this.contentJ.find('#drawing-title').focus();
      };

      DrawingPanel.prototype.hideSubmitDrawing = function() {
        this.submitDrawingBtnJ.hide();
      };

      DrawingPanel.prototype.showBeginDrawing = function() {
        this.beginDrawingBtnJ.show();
      };

      DrawingPanel.prototype.hideBeginDrawing = function() {
        this.beginDrawingBtnJ.hide();
      };

      DrawingPanel.prototype.beginDrawingClicked = function() {
        var id, item, ref;
        R.toolManager.enterDrawingMode();
        this.beginDrawingBtnJ.hide();
        ref = R.items;
        for (id in ref) {
          item = ref[id];
          if (item instanceof Item.Path) {
            if (item.owner === R.me && item.drawingId === null) {
              this.showSubmitDrawing();
              return;
            }
          }
        }
      };

      DrawingPanel.prototype.setDrawingThumbnail = function() {
        var svg, thumbnailJ;
        thumbnailJ = this.contentJ.find('.drawing-thumbnail');
        svg = R.view.getThumbnail(this.currentDrawing);
        svg.setAttribute('viewBox', '0 0 300 300');
        svg.setAttribute('width', '250');
        svg.setAttribute('height', '250');
        thumbnailJ.empty().append(svg);
      };

      DrawingPanel.prototype.checkPathToSubmit = function() {
        var id, item, ref;
        ref = R.items;
        for (id in ref) {
          item = ref[id];
          if (item instanceof Item.Path && item.owner === R.me && item.group.parent === R.view.mainLayer) {
            return true;
          }
        }
        return false;
      };

      DrawingPanel.prototype.submitDrawingClicked = function() {
        var bounds, draft;
        draft = Item.Drawing.getDraft();
        if (draft == null) {
          return;
        }
        R.tools.select.deselectAll();
        R.toolManager.leaveDrawingMode(true);
        this.currentDrawing = draft;
        this.drawingPanelTitleJ.attr('data-i18n', 'Create drawing').text(i18next.t('Create drawing'));
        this.contentJ.find('.comments-container').hide();
        this.open();
        this.showContent();
        this.contentJ.find('#drawing-title').focus();
        this.contentJ.find('#drawing-author').val(R.me);
        this.contentJ.find('.title-group').show();
        this.contentJ.find('#drawing-title').val('');
        this.thumbnailFooterAuthor.text(R.me);
        this.thumbnailFooterTitle.text('');
        this.contentJ.find('#drawing-description').val('');
        this.submitBtnJ.show();
        this.modifyBtnJ.hide();
        this.cancelBtnJ.show();
        this.cancelBtnJ.find('span.text').attr('data-i18n', 'Cancel').text(i18next.t('Cancel'));
        this.contentJ.find('#drawing-title').removeAttr('readonly');
        this.contentJ.find('#drawing-description').removeAttr('readonly');
        this.votesJ.hide();
        this.contentJ.find('.share-buttons').hide();
        bounds = this.currentDrawing.getBounds();
        if (bounds != null) {
          R.view.fitRectangle(bounds, true);
        }
        this.setDrawingThumbnail();
        this.currentDrawing.select(true, false);
      };

      DrawingPanel.prototype.setVotes = function() {
        var i, len, liJ, nNegativeVotes, nPositiveVotes, nVotes, negativeVoteListJ, positiveVoteListJ, ref, v, vote;
        this.votesJ.show();
        this.voteUpBtnJ.removeClass('voted');
        this.voteDownBtnJ.removeClass('voted');
        positiveVoteListJ = this.drawingPanelJ.find('.vote-list ul.positive');
        negativeVoteListJ = this.drawingPanelJ.find('.vote-list ul.negative');
        positiveVoteListJ.empty();
        negativeVoteListJ.empty();
        nPositiveVotes = 0;
        nNegativeVotes = 0;
        ref = this.currentDrawing.votes;
        for (i = 0, len = ref.length; i < len; i++) {
          vote = ref[i];
          v = JSON.parse(vote.vote);
          liJ = $('<li data-author-pk="' + vote.authorPk + '">' + vote.author + '</li>');
          if (v.positive) {
            nPositiveVotes++;
            positiveVoteListJ.append(liJ);
            if (vote.author === R.me) {
              this.voteUpBtnJ.addClass('voted');
            }
          } else {
            nNegativeVotes++;
            negativeVoteListJ.append(liJ);
            if (vote.author === R.me) {
              this.voteDownBtnJ.addClass('voted');
            }
          }
        }
        if (nPositiveVotes > 0) {
          this.drawingPanelJ.find('.vote-list.positive').removeClass('hidden');
        } else {
          this.drawingPanelJ.find('.vote-list.positive').addClass('hidden');
        }
        if (nNegativeVotes > 0) {
          this.drawingPanelJ.find('.vote-list.negative').removeClass('hidden');
        } else {
          this.drawingPanelJ.find('.vote-list.negative').addClass('hidden');
        }
        this.votesJ.find('.n-votes.positive').html(nPositiveVotes);
        this.votesJ.find('.n-votes.negative').html(nNegativeVotes);
        nVotes = nPositiveVotes + nNegativeVotes;
        this.votesJ.find('.n-votes.total').html(nVotes);
        this.votesJ.find('.percentage-votes').html(nVotes > 0 ? 100 * nPositiveVotes / nVotes : 0);
        this.votesJ.find('.status').attr('data-i18n', this.currentDrawing.status).html(i18next.t(this.currentDrawing.status));
        this.voteUpBtnJ.removeClass('disabled');
        this.voteDownBtnJ.removeClass('disabled');
        if (this.currentDrawing.owner === R.me || R.administrator) {
          if (this.currentDrawing.status === 'pending' || this.currentDrawing.status === 'emailNotConfirmed') {
            this.voteUpBtnJ.removeClass('disabled');
            this.voteDownBtnJ.removeClass('disabled');
          }
        }
      };

      DrawingPanel.prototype.setDrawing = function(currentDrawing, drawingData) {
        var latestDrawing;
        this.currentDrawing = currentDrawing;
        this.drawingPanelTitleJ.attr('data-i18n', 'Drawing info').text(i18next.t('Drawing info'));
        this.open();
        this.showContent();
        this.contentJ.find('.share-buttons').show();
        if ((R.me == null) || !_.isString(R.me) || R.me.length === 0) {
          this.contentJ.find('.comments-container').hide();
        } else {
          this.contentJ.find('.comments-container').show();
        }
        latestDrawing = JSON.parse(drawingData.drawing);
        this.currentDrawing.votes = drawingData.votes;
        this.currentDrawing.status = latestDrawing.status;
        this.submitBtnJ.hide();
        this.modifyBtnJ.hide();
        this.cancelBtnJ.hide();
        this.contentJ.find('#drawing-author').val(this.currentDrawing.owner);
        this.contentJ.find('.title-group').hide();
        this.contentJ.find('#drawing-title').val(this.currentDrawing.title);
        this.thumbnailFooterAuthor.text(this.currentDrawing.owner);
        this.thumbnailFooterTitle.text(this.currentDrawing.title);
        this.contentJ.find('#drawing-description').val(this.currentDrawing.description);
        if (this.currentDrawing.owner === R.me || R.administrator) {
          if (latestDrawing.status === 'pending' || latestDrawing.status === 'emailNotConfirmed') {
            this.contentJ.find('.title-group').show();
            this.modifyBtnJ.show();
            this.cancelBtnJ.show();
            this.cancelBtnJ.find('span.text').attr('data-i18n', 'Cancel vote').text(i18next.t('Cancel vote'));
          }
          this.contentJ.find('#drawing-title').removeAttr('readonly');
          this.contentJ.find('#drawing-description').removeAttr('readonly');
        } else {
          this.contentJ.find('#drawing-title').attr('readonly', true);
          this.contentJ.find('#drawing-description').attr('readonly', true);
        }
        this.setVotes();
        this.setDrawingThumbnail();
        this.emptyComments();
        $.ajax({
          method: "POST",
          url: "ajaxCall/",
          data: {
            data: JSON.stringify({
              "function": 'loadComments',
              args: {
                drawingPk: this.currentDrawing.pk
              }
            })
          }
        }).done((function(_this) {
          return function(results) {
            if (!R.loader.checkError(results)) {
              return;
            }
            _this.addComments(results.comments);
          };
        })(this));
      };

      DrawingPanel.prototype.onDrawingChange = function(data) {
        var drawing, sameCity;
        switch (data.type) {
          case 'votes':
            drawing = R.items[data.drawingId];
            if (drawing != null) {
              drawing.votes = data.votes;
              if (this.currentDrawing === drawing) {
                this.setVotes();
              }
            }
            break;
          case 'new':
            sameCity = data.city === R.city.name || data.city === 'CommeUnDessein' && (R.city.name == null);
            if (!sameCity) {
              return;
            }
            if ((R.items[data.pk] != null) || (R.items[data.drawingId] != null)) {
              return;
            }
            $.ajax({
              method: "POST",
              url: "ajaxCall/",
              data: {
                data: JSON.stringify({
                  "function": 'loadDrawing',
                  args: {
                    pk: data.pk,
                    loadSVG: true
                  }
                })
              }
            }).done(function(results) {
              if (!R.loader.checkError(results)) {
                return;
              }
              results.items = [results.drawing];
              R.loader.loadSVGCallback(results);
            });
            break;
          case 'description':
          case 'title':
            drawing = R.items[data.drawingId];
            if (drawing != null) {
              drawing.title = data.title;
              drawing.description = data.description;
              if (this.currentDrawing === drawing) {
                this.contentJ.find('#drawing-title').val(data.title);
                this.thumbnailFooterTitle.text(data.title);
                this.contentJ.find('#drawing-description').val(data.description);
              }
            }
            break;
          case 'status':
            drawing = R.items[data.drawingId];
            if (drawing != null) {
              drawing.updateStatus(data.status);
            }
            break;
          case 'cancel':
            drawing = R.items[data.drawingId];
            if ((drawing != null) && drawing.owner !== R.me) {
              drawing.remove();
            }
            break;
          case 'delete':
            drawing = R.items[data.drawingId];
            if (drawing != null) {
              drawing.remove();
            }
            break;
          case 'addComment':
            drawing = R.pkToDrawing[data.drawingPk];
            if (drawing != null) {
              if (this.currentDrawing === drawing) {
                this.addComment(data.comment, data.commentPk, data.author, data.date, data.insertAfter);
              }
            }
            break;
          case 'modifyComment':
            drawing = R.pkToDrawing[data.drawingPk];
            if (drawing != null) {
              if (this.currentDrawing === drawing) {
                this.contentJ.find('#comment-' + data.commentPk).find('.comment-text').get(0).innerText = data.comment;
              }
            }
            break;
          case 'deleteComment':
            drawing = R.pkToDrawing[data.drawingPk];
            if (drawing != null) {
              if (this.currentDrawing === drawing) {
                this.contentJ.find('#comment-' + data.commentPk).remove();
              }
            }
        }
      };


      /* votes */

      DrawingPanel.prototype.hasAlreadyVoted = function() {
        var i, len, ref, vote;
        ref = this.currentDrawing.votes;
        for (i = 0, len = ref.length; i < len; i++) {
          vote = ref[i];
          if (vote.vote.author === R.me) {
            return true;
          }
        }
        return false;
      };

      DrawingPanel.prototype.voteCallback = function(result) {
        var delay, suffix;
        if (!R.loader.checkError(result)) {
          return;
        }
        this.currentDrawing.updateDrawingPanel();
        if (result.cancelled) {
          R.alertManager.alert('Your vote was successfully cancelled', 'success');
          return;
        }
        this.currentDrawing.votes = result.votes;
        delay = moment.duration(result.delay, 'seconds').humanize();
        suffix = '';
        if (result.validates) {
          suffix = ', the drawing will be validated';
        } else if (result.rejects) {
          suffix = ', the drawing will be rejected';
        }
        if ((result.emailConfirmed != null) && !result.emailConfirmed) {
          suffix = ' but email not confirmed';
        }
        R.alertManager.alert('You successfully voted' + suffix, 'success', null, {
          duration: delay
        });
      };

      DrawingPanel.prototype.vote = function(positive) {
        var args;
        if (this.currentDrawing.owner === R.me) {
          R.alertManager.alert('You cannot vote for your own drawing', 'error');
          return;
        }
        if (this.currentDrawing.status !== 'pending' && this.currentDrawing.status !== 'emailNotConfirmed') {
          R.alertManager.alert('The drawing is already validated', 'error');
          return;
        }
        if (this.hasAlreadyVoted()) {
          R.alertManager.alert('You already voted for this drawing', 'error');
          return;
        }
        args = {
          pk: this.currentDrawing.pk,
          date: Date.now(),
          positive: positive
        };
        $.ajax({
          method: "POST",
          url: "ajaxCall/",
          data: {
            data: JSON.stringify({
              "function": 'vote',
              args: args
            })
          }
        }).done(this.voteCallback);
      };

      DrawingPanel.prototype.voteUp = function() {
        this.vote(true);
      };

      DrawingPanel.prototype.voteDown = function() {
        this.vote(false);
      };


      /* submit modify cancel drawing */

      DrawingPanel.prototype.submitDrawing = function() {
        var description, title;
        if ((R.me == null) || !_.isString(R.me)) {
          R.alertManager.alert("You must be logged in to submit a drawing", "error");
          return;
        }
        title = this.contentJ.find('#drawing-title').val();
        description = this.contentJ.find('#drawing-description').val();
        if (title.length === 0) {
          R.alertManager.alert("You must enter a title", "error");
          return;
        }
        this.currentDrawing.title = title;
        this.currentDrawing.description = description;
        this.currentDrawing.submit();
        this.close(false);
      };

      DrawingPanel.prototype.modifyDrawing = function() {
        if ((R.me == null) || !_.isString(R.me)) {
          R.alertManager.alert("You must be logged in to modify a drawing", "error");
          return;
        }
        if (this.currentDrawing == null) {
          R.alertManager.alert("You must select a drawing first", "error");
          return;
        }
        if (this.currentDrawing.status !== 'pending' && this.currentDrawing.status !== 'emailNotConfirmed') {
          R.alertManager.alert("The drawing is already validated, it cannot be modified anymore", "error");
          return;
        }
        this.currentDrawing.update({
          title: this.contentJ.find('#drawing-title').val(),
          data: this.contentJ.find('#drawing-description').val()
        });
      };

      DrawingPanel.prototype.cancelDrawing = function() {
        if (this.currentDrawing == null) {
          this.close();
          return;
        }
        if ((this.currentDrawing.pk == null) || this.currentDrawing.status === 'draft') {
          this.close();
          return;
        }
        if (this.currentDrawing.status !== 'pending' && this.currentDrawing.status !== 'draft' && this.currentDrawing.status !== 'emailNotConfirmed') {
          R.alertManager.alert("The drawing is already validated, it cannot be cancelled anymore", "error");
          return;
        }
        if ((R.me == null) || !_.isString(R.me)) {
          R.alertManager.alert("You must be logged in to cancel a drawing", "error");
          return;
        }
        this.currentDrawing.cancel();
        this.close();
      };

      DrawingPanel.prototype.deleteGivenPaths = function(paths) {
        var deleteCommand, i, len, path, pathsToDelete, pathsToDeleteResurectors;
        pathsToDelete = [];
        pathsToDeleteResurectors = {};
        for (i = 0, len = paths.length; i < len; i++) {
          path = paths[i];
          if (path.pk != null) {
            pathsToDelete.push(path);
            pathsToDeleteResurectors[path.id] = {
              data: path.getDuplicateData(),
              constructor: path.constructor
            };
          } else {
            path.remove();
          }
        }
        if (pathsToDelete.length > 0) {
          deleteCommand = new Command.DeleteItems(pathsToDelete, pathsToDeleteResurectors);
          R.commandManager.add(deleteCommand, true);
        }
      };

      return DrawingPanel;

    })();
    return DrawingPanel;
  });

}).call(this);
