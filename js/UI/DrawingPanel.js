// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['coffee', 'typeahead'], function(CoffeeScript) {
    var DrawingPanel;
    DrawingPanel = (function() {
      function DrawingPanel() {
        this.setDrawing = bind(this.setDrawing, this);
        this.hideLoadAnimation = bind(this.hideLoadAnimation, this);
        this.showLoadAnimation = bind(this.showLoadAnimation, this);
        this.close = bind(this.close, this);
        this.onMouseUp = bind(this.onMouseUp, this);
        this.resize = bind(this.resize, this);
        this.setFullSize = bind(this.setFullSize, this);
        this.setHalfSize = bind(this.setHalfSize, this);
        this.onHandleDown = bind(this.onHandleDown, this);
        var closeBtnJ, handleJ, runBtnJ;
        this.drawingPanelJ = $("#drawingPanel");
        this.drawingPanelJ.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd", this.resize);
        handleJ = this.drawingPanelJ.find(".panel-handle");
        handleJ.mousedown(this.onHandleDown);
        handleJ.find('.handle-right').click(this.setHalfSize);
        handleJ.find('.handle-left').click(this.setFullSize);
        this.fileNameJ = this.drawingPanelJ.find(".header .fileName input");
        this.linkFileInputJ = this.drawingPanelJ.find("input.link-file");
        this.linkFileInputJ.change(this.linkFile);
        closeBtnJ = this.drawingPanelJ.find("button.close-panel");
        closeBtnJ.click(this.close);
        this.footerJ = this.drawingPanelJ.find(".footer");
        runBtnJ = this.drawingPanelJ.find("button.submit.run");
        runBtnJ.click(this.runFile);
        return;
      }


      /* mouse interaction */

      DrawingPanel.prototype.onHandleDown = function() {
        this.draggingEditor = true;
        $("body").css({
          'user-select': 'none'
        });
      };

      DrawingPanel.prototype.setHalfSize = function() {
        this.drawingPanelJ.css({
          left: '70%'
        });
        this.resize();
      };

      DrawingPanel.prototype.setFullSize = function() {
        this.drawingPanelJ.css({
          left: '265px'
        });
        this.resize();
      };

      DrawingPanel.prototype.resize = function() {};

      DrawingPanel.prototype.onMouseMove = function(event) {
        if (this.draggingEditor) {
          this.drawingPanelJ.css({
            left: Math.max(265, event.pageX)
          });
        }
      };

      DrawingPanel.prototype.onMouseUp = function(event) {
        this.draggingEditor = false;
        $("body").css({
          'user-select': 'text'
        });
      };


      /* open close */

      DrawingPanel.prototype.open = function() {
        this.drawingPanelJ.show();
        this.drawingPanelJ.addClass('visible');
      };

      DrawingPanel.prototype.close = function() {
        this.drawingPanelJ.hide();
        this.drawingPanelJ.removeClass('visible');
      };


      /* set drawing */

      DrawingPanel.prototype.showLoadAnimation = function() {
        this.drawingPanelJ.find('.content').children().hide();
        this.drawingPanelJ.find('.content').children('.loading-animation').show();
      };

      DrawingPanel.prototype.hideLoadAnimation = function() {
        this.drawingPanelJ.find('.content').children().show();
        this.drawingPanelJ.find('.content').children('.loading-animation').hide();
      };

      DrawingPanel.prototype.setDrawing = function(currentDrawing, drawingData) {
        var i, len, ref, vote;
        this.currentDrawing = currentDrawing;
        this.hideLoadAnimation();
        ref = drawingData.votes;
        for (i = 0, len = ref.length; i < len; i++) {
          vote = ref[i];
          vote.vote;
          vote.author;
          vote.authorPk;
        }
      };

      return DrawingPanel;

    })();
    return DrawingPanel;
  });

}).call(this);
