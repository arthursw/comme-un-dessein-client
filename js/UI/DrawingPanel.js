// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['paper', 'R', 'Utils/Utils', 'Items/Item', 'coffeescript-compiler', 'typeahead'], function(P, R, Utils, Item, CoffeeScript) {
    var DrawingPanel;
    DrawingPanel = (function() {
      function DrawingPanel() {
        this.cancelDrawing = bind(this.cancelDrawing, this);
        this.modifyDrawing = bind(this.modifyDrawing, this);
        this.submitDrawing = bind(this.submitDrawing, this);
        this.voteDown = bind(this.voteDown, this);
        this.voteUp = bind(this.voteUp, this);
        this.vote = bind(this.vote, this);
        this.voteCallback = bind(this.voteCallback, this);
        this.submitDrawingClicked = bind(this.submitDrawingClicked, this);
        this.submitDrawingClickedCallback = bind(this.submitDrawingClickedCallback, this);
        this.beginDrawingClicked = bind(this.beginDrawingClicked, this);
        this.showContent = bind(this.showContent, this);
        this.showLoadAnimation = bind(this.showLoadAnimation, this);
        this.close = bind(this.close, this);
        this.updateSelection = bind(this.updateSelection, this);
        this.onMouseUp = bind(this.onMouseUp, this);
        this.resize = bind(this.resize, this);
        this.setFullSize = bind(this.setFullSize, this);
        this.setHalfSize = bind(this.setHalfSize, this);
        this.onHandleDown = bind(this.onHandleDown, this);
        var closeBtnJ, contentJ, descriptionJ, handleJ, runBtnJ;
        this.beginDrawingBtnJ = $('button.begin-drawing');
        this.beginDrawingBtnJ.click(this.beginDrawingClicked);
        this.submitDrawingBtnJ = $('button.submit-drawing');
        this.submitDrawingBtnJ.click(this.submitDrawingClicked);
        this.drawingPanelJ = $("#drawingPanel");
        this.drawingPanelJ.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd", this.resize);
        handleJ = this.drawingPanelJ.find(".panel-handle");
        handleJ.mousedown(this.onHandleDown);
        handleJ.find('.handle-right').click(this.setHalfSize);
        handleJ.find('.handle-left').click(this.setFullSize);
        this.drawingPanelTitleJ = this.drawingPanelJ.find('.drawing-panel-title');
        this.fileNameJ = this.drawingPanelJ.find(".header .fileName input");
        this.linkFileInputJ = this.drawingPanelJ.find("input.link-file");
        this.linkFileInputJ.change(this.linkFile);
        closeBtnJ = this.drawingPanelJ.find("button.close-panel");
        closeBtnJ.click(this.close);
        this.votesJ = this.drawingPanelJ.find('.votes');
        runBtnJ = this.drawingPanelJ.find("button.submit.run");
        runBtnJ.click(this.runFile);
        this.voteUpBtnJ = this.drawingPanelJ.find('.vote-up');
        this.voteUpBtnJ.click(this.voteUp);
        this.voteDownBtnJ = this.drawingPanelJ.find('.vote-down');
        this.voteDownBtnJ.click(this.voteDown);
        this.submitBtnJ = this.drawingPanelJ.find('form.create button.submit');
        this.modifyBtnJ = this.drawingPanelJ.find('form.create button.modify');
        this.cancelBtnJ = this.drawingPanelJ.find('form.create button.cancel');
        this.submitBtnJ.click(this.submitDrawing);
        this.modifyBtnJ.click(this.modifyDrawing);
        this.cancelBtnJ.click(this.cancelDrawing);
        contentJ = this.drawingPanelJ.find('.content');
        descriptionJ = contentJ.find('#drawing-description');
        descriptionJ.keydown((function(_this) {
          return function(event) {
            switch (Utils.specialKeys[event.keyCode]) {
              case 'enter':
                if (event.metaKey || event.ctrlKey) {
                  _this.submitDrawing();
                }
            }
          };
        })(this));
        return;
      }


      /* mouse interaction */

      DrawingPanel.prototype.onHandleDown = function() {
        this.draggingEditor = true;
        $("body").css({
          'user-select': 'none'
        });
      };

      DrawingPanel.prototype.setHalfSize = function() {
        this.drawingPanelJ.css({
          left: '70%'
        });
        this.resize();
      };

      DrawingPanel.prototype.setFullSize = function() {
        this.drawingPanelJ.css({
          left: '265px'
        });
        this.resize();
      };

      DrawingPanel.prototype.resize = function() {};

      DrawingPanel.prototype.onMouseMove = function(event) {
        var point;
        if (this.draggingEditor) {
          point = Utils.Event.GetPoint(event);
          this.drawingPanelJ.css({
            left: Math.max(265, point.x)
          });
        }
      };

      DrawingPanel.prototype.onMouseUp = function(event) {
        this.draggingEditor = false;
        $("body").css({
          'user-select': 'text'
        });
      };

      DrawingPanel.prototype.updateSelection = function() {
        var drawing;
        if (R.selectedItems.length === 1) {
          this.showLoadAnimation();
          this.open();
          drawing = R.selectedItems[0];
          if (drawing.pk != null) {
            delete drawing.selectAfterSave;
            drawing.updateDrawingPanel();
          } else {
            drawing.selectAfterSave = true;
          }
        } else {
          this.showSelectedDrawings();
          this.open();
        }
      };

      DrawingPanel.prototype.selectionChanged = function() {
        Utils.callNextFrame(this.updateSelection, 'update drawing selection');
      };


      /* open close */

      DrawingPanel.prototype.open = function() {
        this.drawingPanelJ.show();
        this.drawingPanelJ.addClass('visible');
      };

      DrawingPanel.prototype.close = function(removeDrawingIfNotSaved) {
        if (removeDrawingIfNotSaved == null) {
          removeDrawingIfNotSaved = true;
        }
        if ((this.currentDrawing != null) && (this.currentDrawing.pk == null)) {
          if (removeDrawingIfNotSaved) {
            this.currentDrawing.remove();
          }
          this.hideSubmitDrawing();
          this.showBeginDrawing();
        }
        this.drawingPanelJ.hide();
        this.drawingPanelJ.removeClass('visible');
        if (R.selectedItems.length > 0) {
          R.tools.select.deselectAll();
        }
      };


      /* set drawing */

      DrawingPanel.prototype.createSelectionLi = function(selectedDrawingsJ, listJ, item) {
        var deselectBtnJ, deselectIconJ, liJ, thumbnailJ, titleJ;
        liJ = $('<li>');
        liJ.addClass('drawing-selection cd-button');
        liJ.addClass('cd-row');
        thumbnailJ = $('<div>');
        thumbnailJ.addClass('thumbnail drawing-thumbnail');
        thumbnailJ.append(this.getDrawingImage(item));
        titleJ = $('<h4>');
        titleJ.addClass('cd-grow cd-center');
        titleJ.html(item.title);
        deselectBtnJ = $('<button>');
        deselectIconJ = $('<span>').addClass('glyphicon glyphicon-remove');
        deselectBtnJ.click(function(event) {
          item.deselect();
          liJ.remove();
          event.preventDefault();
          event.stopPropagation();
          return -1;
        });
        deselectBtnJ.append(deselectIconJ);
        liJ.append(thumbnailJ);
        liJ.append(titleJ);
        liJ.append(deselectBtnJ);
        liJ.click(function() {
          selectedDrawingsJ.hide();
          listJ.empty();
          R.tools.select.deselectAll();
          item.select();
        });
        listJ.append(liJ);
      };

      DrawingPanel.prototype.showSelectedDrawings = function() {
        var item, j, len, listJ, ref, selectedDrawingsJ;
        this.drawingPanelTitleJ.text('Select a single drawing');
        this.drawingPanelJ.find('.content').children().hide();
        selectedDrawingsJ = this.drawingPanelJ.find('.content').children('.selected-drawings');
        selectedDrawingsJ.show();
        listJ = selectedDrawingsJ.find('ul.drawing-list');
        listJ.empty();
        ref = R.selectedItems;
        for (j = 0, len = ref.length; j < len; j++) {
          item = ref[j];
          if (item instanceof Item.Drawing) {
            this.createSelectionLi(selectedDrawingsJ, listJ, item);
          }
        }
      };

      DrawingPanel.prototype.showLoadAnimation = function() {
        this.drawingPanelJ.find('.content').children().hide();
        this.drawingPanelJ.find('.content').children('.loading-animation').show();
      };

      DrawingPanel.prototype.showContent = function() {
        this.drawingPanelJ.find('.content').children().show();
        this.drawingPanelJ.find('.content').children('.loading-animation').hide();
        this.drawingPanelJ.find('.content').children('.selected-drawings').hide();
      };

      DrawingPanel.prototype.showSubmitDrawing = function() {
        var contentJ;
        this.hideBeginDrawing();
        this.submitDrawingBtnJ.removeClass('hidden');
        this.submitDrawingBtnJ.show();
        contentJ = this.drawingPanelJ.find('.content');
        contentJ.find('#drawing-title').focus();
      };

      DrawingPanel.prototype.hideSubmitDrawing = function() {
        this.submitDrawingBtnJ.hide();
      };

      DrawingPanel.prototype.showBeginDrawing = function() {
        this.hideSubmitDrawing();
        this.beginDrawingBtnJ.show();
      };

      DrawingPanel.prototype.hideBeginDrawing = function() {
        this.beginDrawingBtnJ.hide();
      };

      DrawingPanel.prototype.beginDrawingClicked = function() {
        var id, item, ref;
        R.toolManager.enterDrawingMode();
        this.beginDrawingBtnJ.hide();
        ref = R.items;
        for (id in ref) {
          item = ref[id];
          if (item instanceof Item.Path) {
            if (item.owner === R.me && item.drawingId === null) {
              this.showSubmitDrawing();
              return;
            }
          }
        }
      };

      DrawingPanel.prototype.getDrawingImage = function(drawing) {
        var image;
        if (drawing.raster == null) {
          drawing.rasterize();
        }
        image = new Image();
        image.src = drawing.raster.toDataURL();
        return image;
      };

      DrawingPanel.prototype.setDrawingThumbnail = function() {
        var contentJ, thumbnailJ;
        contentJ = this.drawingPanelJ.find('.content');
        this.currentDrawing.rasterize();
        R.rasterizer.rasterize(this.currentDrawing, false);
        thumbnailJ = contentJ.find('.drawing-thumbnail');
        thumbnailJ.empty().append(this.getDrawingImage(this.currentDrawing));
      };

      DrawingPanel.prototype.createDrawingFromItems = function(items) {
        var contentJ, description, drawingId, item, j, len, title;
        drawingId = Utils.createId();
        for (j = 0, len = items.length; j < len; j++) {
          item = items[j];
          if (item instanceof Item.Path) {
            item.drawingId = drawingId;
          }
        }
        contentJ = this.drawingPanelJ.find('.content');
        title = contentJ.find('#drawing-title').val();
        description = contentJ.find('#drawing-description').val();
        this.currentDrawing = new Item.Drawing(null, null, drawingId, null, R.me, Date.now(), title, description, 'pending');
        this.setDrawingThumbnail();
        R.view.fitRectangle(this.currentDrawing.rectangle, true);
      };

      DrawingPanel.prototype.submitDrawingClickedCallback = function(results) {
        var i, id, item, itemIds, items, itemsToLoad, j, k, len, len1, ref;
        this.submitBtnJ.find('span.glyphicon').removeClass('glyphicon-refresh glyphicon-refresh-animate').addClass('glyphicon-ok');
        if (!R.loader.checkError(results)) {
          return;
        }
        itemsToLoad = [];
        itemIds = [];
        ref = results.items;
        for (j = 0, len = ref.length; j < len; j++) {
          i = ref[j];
          item = JSON.parse(i);
          itemIds.push(item.clientId);
          if (R.items[item.clientId] == null) {
            itemsToLoad.push(item);
          }
        }
        R.loader.createNewItems(itemsToLoad);
        items = [];
        for (k = 0, len1 = itemIds.length; k < len1; k++) {
          id = itemIds[k];
          items.push(R.items[id]);
        }
        this.createDrawingFromItems(items);
      };

      DrawingPanel.prototype.submitDrawingClicked = function() {
        var contentJ;
        R.toolManager.leaveDrawingMode();
        this.drawingPanelTitleJ.text('Create drawing');
        this.open();
        this.showContent();
        this.currentDrawing = null;
        contentJ = this.drawingPanelJ.find('.content');
        contentJ.find('.read').hide();
        contentJ.find('.modify').show();
        contentJ.find('#drawing-title').val('');
        contentJ.find('#drawing-description').val('');
        this.submitBtnJ.show();
        this.modifyBtnJ.hide();
        this.cancelBtnJ.show();
        this.votesJ.hide();
        this.currentDrawing = null;
        if (R.selectedItems.length === 0) {
          this.submitBtnJ.find('span.glyphicon').removeClass('glyphicon-ok').addClass('glyphicon-refresh glyphicon-refresh-animate');
          $.ajax({
            method: "POST",
            url: "ajaxCall/",
            data: {
              data: JSON.stringify({
                "function": 'getDrafts',
                args: {}
              })
            }
          }).done(this.submitDrawingClickedCallback);
          return;
        }
        this.createDrawingFromItems(R.selectedItems);
      };

      DrawingPanel.prototype.setDrawing = function(currentDrawing, drawingData) {
        var contentJ, j, k, len, len1, liJ, nNegativeVotes, nPositiveVotes, nVotes, negativeVoteListJ, p, path, pathsToLoad, positiveVoteListJ, ref, ref1, v, vote;
        this.currentDrawing = currentDrawing;
        this.drawingPanelTitleJ.text(this.currentDrawing.title);
        this.open();
        this.showContent();
        contentJ = this.drawingPanelJ.find('.content');
        this.currentDrawing.votes = drawingData.votes;
        if (this.currentDrawing.owner === R.me || R.administrator) {
          contentJ.find('.read').hide();
          contentJ.find('.modify').show();
          contentJ.find('#drawing-title').val(this.currentDrawing.title);
          contentJ.find('#drawing-description').val(this.currentDrawing.description);
          this.submitBtnJ.hide();
          this.modifyBtnJ.show();
          this.cancelBtnJ.show();
        } else {
          contentJ.find('.read').show();
          contentJ.find('.modify').hide();
          contentJ.find('.title').html(this.currentDrawing.title);
          contentJ.find('.description').html(this.currentDrawing.description);
          contentJ.find('.author').html(this.currentDrawing.owner);
        }
        this.votesJ.show();
        this.voteUpBtnJ.removeClass('voted');
        this.voteDownBtnJ.removeClass('voted');
        positiveVoteListJ = this.drawingPanelJ.find('.vote-list.positive');
        negativeVoteListJ = this.drawingPanelJ.find('.vote-list.negative');
        positiveVoteListJ.empty();
        negativeVoteListJ.empty();
        nPositiveVotes = 0;
        nNegativeVotes = 0;
        ref = drawingData.votes;
        for (j = 0, len = ref.length; j < len; j++) {
          vote = ref[j];
          v = JSON.parse(vote.vote);
          liJ = $('<li data-author-pk="' + vote.authorPk + '">' + vote.author + '</li>');
          if (v.positive) {
            nPositiveVotes++;
            positiveVoteListJ.append(liJ);
            if (vote.author === R.me) {
              this.voteUpBtnJ.addClass('voted');
            }
          } else {
            nNegativeVotes++;
            negativeVoteListJ.append(liJ);
            if (vote.author === R.me) {
              this.voteDownBtnJ.addClass('voted');
            }
          }
        }
        if (nPositiveVotes > 0) {
          positiveVoteListJ.removeClass('hidden');
        } else {
          positiveVoteListJ.addClass('hidden');
        }
        if (nNegativeVotes > 0) {
          negativeVoteListJ.removeClass('hidden');
        } else {
          negativeVoteListJ.addClass('hidden');
        }
        this.votesJ.find('.n-votes.positive').html(nPositiveVotes);
        this.votesJ.find('.n-votes.negative').html(nNegativeVotes);
        nVotes = nPositiveVotes + nNegativeVotes;
        this.votesJ.find('.n-votes.total').html(nVotes);
        this.votesJ.find('.percentage-votes').html(nVotes > 0 ? 100 * nPositiveVotes / nVotes : 0);
        pathsToLoad = [];
        ref1 = drawingData.paths;
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          p = ref1[k];
          path = JSON.parse(p);
          if (!R.items[path.clientId]) {
            pathsToLoad.push(path);
          }
        }
        R.loader.createNewItems(pathsToLoad);
        this.setDrawingThumbnail();
      };


      /* votes */

      DrawingPanel.prototype.hasAlreadyVoted = function() {
        var j, len, ref, vote;
        ref = this.currentDrawing.votes;
        for (j = 0, len = ref.length; j < len; j++) {
          vote = ref[j];
          if (vote.vote.author === R.me) {
            return true;
          }
        }
        return false;
      };

      DrawingPanel.prototype.voteCallback = function(result) {
        var suffix;
        if (!R.loader.checkError(result)) {
          return;
        }
        this.currentDrawing.updateDrawingPanel();
        if (result.cancelled) {
          R.alertManager.alert('Your vote was successfully cancelled', 'success');
          return;
        }
        suffix = '';
        if (result.validates) {
          suffix = ', the drawing will be validated in a minute if nobody cancels its vote!';
        } else if (result.rejects) {
          suffix = ', the drawing will be rejected in a minute if nobody cancels its vote!';
        }
        R.alertManager.alert('You successfully voted' + suffix, 'success');
      };

      DrawingPanel.prototype.vote = function(positive) {
        var args;
        if (this.currentDrawing.owner === R.me) {
          R.alertManager.alert('You cannot vote for your own drawing', 'error');
          return;
        }
        if (this.hasAlreadyVoted()) {
          R.alertManager.alert('You already voted for this drawing', 'error');
          return;
        }
        args = {
          pk: this.currentDrawing.pk,
          date: Date.now(),
          positive: positive
        };
        $.ajax({
          method: "POST",
          url: "ajaxCall/",
          data: {
            data: JSON.stringify({
              "function": 'vote',
              args: args
            })
          }
        }).done(this.voteCallback);
      };

      DrawingPanel.prototype.voteUp = function() {
        this.vote(true);
      };

      DrawingPanel.prototype.voteDown = function() {
        this.vote(false);
      };


      /* submit modify cancel drawing */

      DrawingPanel.prototype.submitDrawing = function() {
        var contentJ;
        if ((R.me == null) || !_.isString(R.me)) {
          R.alertManager.alert("You must be logged in to submit a drawing.", "error");
          return;
        }
        contentJ = this.drawingPanelJ.find('.content');
        this.currentDrawing.title = contentJ.find('#drawing-title').val();
        this.currentDrawing.description = contentJ.find('#drawing-description').val();
        this.currentDrawing.save();
        this.close(false);
      };

      DrawingPanel.prototype.modifyDrawing = function() {
        var contentJ;
        if ((R.me == null) || !_.isString(R.me)) {
          R.alertManager.alert("You must be logged in to modify a drawing.", "error");
          return;
        }
        if (this.currentDrawing == null) {
          R.alertManager.alert("You must select a drawing first.", "error");
          return;
        }
        contentJ = this.drawingPanelJ.find('.content');
        this.currentDrawing.update({
          title: contentJ.find('#drawing-title').val(),
          data: contentJ.find('#drawing-description').val()
        });
      };

      DrawingPanel.prototype.cancelDrawing = function() {
        if ((R.me == null) || !_.isString(R.me)) {
          R.alertManager.alert("You must be logged in to cancel a drawing.", "error");
          return;
        }
        if (this.currentDrawing == null) {
          this.close();
          return;
        }
        if (this.currentDrawing.pk == null) {
          this.close();
          return;
        }
        this.currentDrawing.deleteCommand();
        this.close();
      };

      return DrawingPanel;

    })();
    return DrawingPanel;
  });

}).call(this);
