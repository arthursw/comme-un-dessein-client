// Generated by CoffeeScript 1.10.0
(function() {
  define(['paper', 'R', 'Utils/Utils', 'Rasterizers/Rasterizer', 'UI/Controllers/Folder'], function(P, R, Utils, Rasterizer, Folder) {
    var RasterizerManager;
    RasterizerManager = (function() {
      function RasterizerManager() {
        return;
      }

      RasterizerManager.prototype.initializeRasterizers = function() {
        this.rasterizers = {};
        this.addRasterizerParameters();
      };

      RasterizerManager.prototype.addRasterizerParameters = function() {
        var divJ, parameters, rasterizer, ref, renderingModes, type;
        renderingModes = [];
        ref = this.rasterizers;
        for (type in ref) {
          rasterizer = ref[type];
          renderingModes.push(type);
        }
        divJ = $('<div>');
        Rasterizer.Tile.loadingBarJ = divJ;
        parameters = {
          renderingMode: {
            values: renderingModes,
            label: 'Render mode',
            onFinishChange: this.setRasterizerType
          },
          rasterizeItems: {
            "default": true,
            label: 'Rasterize items',
            onFinishChange: function(value) {
              var controller, i, len, ref1;
              ref1 = this.rasterizerFolder.datFolder.__controllers;
              for (i = 0, len = ref1.length; i < len; i++) {
                controller = ref1[i];
                if (controller.property === 'renderInView') {
                  if (value) {
                    $(controller.__li).show();
                  } else {
                    $(controller.__li).hide();
                  }
                }
              }
            }
          },
          renderInView: {
            "default": false,
            label: 'Render in view',
            onFinishChange: function(value) {}
          },
          autoRasterization: {
            "default": 'deferred',
            values: ['immediate', 'deferred', 'disabled'],
            label: 'Auto rasterization',
            onFinishChange: function(value) {}
          },
          rasterizationDelay: {
            "default": 800,
            min: 0,
            max: 10000,
            lable: 'Delay',
            onFinishChange: function(value) {}
          },
          rasterizeImmediately: {
            "default": function() {},
            label: 'Rasterize'
          }
        };
      };

      RasterizerManager.prototype.setRasterizerType = function(type) {
        var controller, i, j, k, len, len1, len2, onFinishChange, ref, ref1, ref2, ref3;
        if (type === Rasterizer.TYPE) {
          ref = this.rasterizerFolder.datFolder.__controllers;
          for (i = 0, len = ref.length; i < len; i++) {
            controller = ref[i];
            if ((ref1 = controller.property) === 'renderInView' || ref1 === 'autoRasterization' || ref1 === 'rasterizationDelay' || ref1 === 'rasterizeImmediately') {
              $(controller.__li).hide();
            }
          }
        } else {
          ref2 = this.rasterizerFolder.datFolder.__controllers;
          for (j = 0, len1 = ref2.length; j < len1; j++) {
            controller = ref2[j];
            $(controller.__li).show();
          }
        }
        R.loader.unload();
        ref3 = this.rasterizerFolder.datFolder.__controllers;
        for (k = 0, len2 = ref3.length; k < len2; k++) {
          controller = ref3[k];
          if (R.rasterizer[controller.property] != null) {
            onFinishChange = controller.__onFinishChange;
            controller.__onFinishChange = function() {};
            controller.__onFinishChange = onFinishChange;
          }
        }
        R.loader.load();
      };

      RasterizerManager.prototype.hideCanvas = function() {
        R.canvasJ.css({
          opacity: 0
        });
      };

      RasterizerManager.prototype.showCanvas = function() {
        R.canvasJ.css({
          opacity: 1
        });
      };

      RasterizerManager.prototype.hideRasters = function() {};

      RasterizerManager.prototype.showRasters = function() {};

      return RasterizerManager;

    })();
    return RasterizerManager;
  });

}).call(this);
