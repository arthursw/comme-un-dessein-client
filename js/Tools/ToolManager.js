// Generated by CoffeeScript 1.12.7
(function() {
  var dependencies;

  dependencies = ['R', 'Utils/Utils', 'Tools/Tool', 'UI/Button', 'Tools/MoveTool', 'Tools/SelectTool', 'Tools/PathTool', 'Tools/EraserTool', 'Tools/ItemTool', 'Tools/Tracer', 'Tools/ChooseTool', 'UI/Modal', 'i18next'];

  define('Tools/ToolManager', dependencies, function(R, Utils, Tool, Button, MoveTool, SelectTool, PathTool, EraserTool, ItemTool, Tracer, ChooseTool, Modal, i18next) {
    var ToolManager;
    ToolManager = (function() {
      ToolManager.minZoomPow = -7;

      ToolManager.maxZoomPow = 2;

      ToolManager.minZoom = Math.pow(2, ToolManager.minZoomPow);

      ToolManager.maxZoom = Math.pow(2, ToolManager.maxZoomPow);

      function ToolManager() {
        var defaultFavoriteTools, error;
        R.ToolsJ = $(".tool-list");
        R.favoriteToolsJ = $("#FavoriteTools .tool-list");
        R.allToolsContainerJ = $("#AllTools");
        R.allToolsJ = R.allToolsContainerJ.find(".all-tool-list");
        R.favoriteTools = [];
        if (typeof localStorage !== "undefined" && localStorage !== null) {
          try {
            R.favoriteTools = JSON.parse(localStorage.favorites);
          } catch (error1) {
            error = error1;
            console.log(error);
          }
        }
        R.tools.move = new R.Tools.Move();
        R.tools.select = new R.Tools.Select();
        this.createColorButtons();
        R.tools.eraser = new R.Tools.Eraser();
        R.tools.eraser.btn.hide();
        R.tracer = new Tracer();
        defaultFavoriteTools = [];
        while (R.favoriteTools.length < 8 && defaultFavoriteTools.length > 0) {
          Utils.Array.pushIfAbsent(R.favoriteTools, defaultFavoriteTools.pop().label);
        }
        R.wacomPlugin = document.getElementById('wacomPlugin');
        if (R.wacomPlugin != null) {
          R.wacomPenAPI = wacomPlugin.penAPI;
          R.wacomTouchAPI = wacomPlugin.touchAPI;
          R.wacomPointerType = {
            0: 'Mouse',
            1: 'Pen',
            2: 'Puck',
            3: 'Eraser'
          };
        }
        this.createZoombuttons();
        this.createUndoRedoButtons();
        R.tools.choose = new R.Tools.Choose();
        this.createInfoButton();
        R.tools.move.select();
        return;
      }

      ToolManager.prototype.clampZoom = function(zoom) {
        return Math.max(this.constructor.minZoom, Math.min(this.constructor.maxZoom, zoom));
      };

      ToolManager.prototype.zoom = function(value, snap) {
        var bounds, ref, zoomPow;
        if (snap == null) {
          snap = true;
        }
        zoomPow = Math.floor(Math.log(P.view.zoom) / Math.log(2));
        zoomPow += value;
        if (snap) {
          if (zoomPow < this.constructor.minZoomPow || zoomPow > this.constructor.maxZoomPow) {
            return;
          }
        } else if (P.view.zoom * value < this.constructor.minZoom || P.view.zoom * value > this.constructor.maxZoom) {
          return;
        }
        bounds = R.view.getViewBounds(true);
        if (value < 1 && bounds.contains(R.view.grid.limitCD.bounds)) {
          return;
        }
        if (bounds.contains(R.view.grid.limitCD.bounds.scale(snap ? Math.pow(value, 2) : value))) {
          R.view.fitRectangle(R.view.grid.limitCD.bounds.expand(200), true);
          return;
        }
        if (snap) {
          P.view.zoom = Math.pow(2, zoomPow);
        } else {
          P.view.zoom *= value;
        }
        if ((ref = R.tracer) != null) {
          ref.update();
        }
        if (zoomPow < -3) {
          R.tools.choose.hideOddLines();
        } else {
          R.tools.choose.showOddLines();
        }
        R.view.moveBy(new P.Point());
      };

      ToolManager.prototype.createZoombuttons = function() {
        this.zoomInBtn = new Button({
          name: 'Zoom +',
          iconURL: R.style === 'line' ? 'icones_icon_zoomin.png' : R.style === 'hand' ? 'a-zoomIn.png' : 'glyphicon-zoom-in',
          favorite: true,
          category: null,
          disableHover: true,
          popover: true,
          order: 1
        });
        this.zoomInBtn.btnJ.click((function(_this) {
          return function() {
            return _this.zoom(1);
          };
        })(this));
        this.zoomOutBtn = new Button({
          name: 'Zoom -',
          iconURL: R.style === 'line' ? 'icones_icon_zoomout.png' : R.style === 'hand' ? 'a-zoomOut.png' : 'glyphicon-zoom-out',
          favorite: true,
          category: null,
          disableHover: true,
          popover: true,
          order: 2
        });
        this.zoomOutBtn.btnJ.click((function(_this) {
          return function() {
            return _this.zoom(-1);
          };
        })(this));
      };

      ToolManager.prototype.createUndoRedoButtons = function() {
        this.undoBtn = new Button({
          name: 'Undo',
          classes: 'dark',
          iconURL: R.style === 'line' ? 'icones_icon_back_02.png' : R.style === 'hand' ? 'a-undo.png' : 'glyphicon-share-alt',
          favorite: true,
          category: null,
          disableHover: true,
          popover: true,
          order: null,
          transform: 'scaleX(-1)'
        });
        this.undoBtn.hide();
        this.undoBtn.btnJ.click(function() {
          return R.commandManager.undo();
        });
        this.redoBtn = new Button({
          name: 'Redo',
          classes: 'dark',
          iconURL: R.style === 'line' ? 'icones_icon_forward_02.png' : R.style === 'hand' ? 'a-redo.png' : 'glyphicon-share-alt',
          favorite: true,
          category: null,
          disableHover: true,
          popover: true,
          order: null
        });
        this.redoBtn.hide();
        this.redoBtn.btnJ.click(function() {
          return R.commandManager["do"]();
        });
      };

      ToolManager.prototype.createColorButtons = function() {
        var black, blue, brown, closeColorMenu, colors, green, red, yellow;
        red = '#F44336';
        blue = '#448AFF';
        green = '#8BC34A';
        yellow = '#FFC107';
        brown = '#795548';
        black = '#000000';
        colors = [red, blue, green, yellow, brown, black];
        R.selectedColor = green;
        this.colorBtn = new Button({
          name: 'Colors',
          iconURL: 'glyphicon-tint',
          classes: 'dark',
          favorite: true,
          category: null,
          disableHover: true,
          popover: true,
          order: null
        });
        this.colorBtn.hide();
        closeColorMenu = function() {
          $('#color-picker').remove();
        };
        this.colorBtn.cloneJ.find('.glyphicon').css({
          color: R.selectedColor
        });
        this.colorBtn.btnJ.click((function(_this) {
          return function() {
            var color, i, len, liJ, position, ulJ;
            position = _this.colorBtn.cloneJ.offset();
            ulJ = $('<ul>').attr('id', 'color-picker').css({
              position: 'absolute',
              top: position.top + 62,
              left: position.left
            });
            for (i = 0, len = colors.length; i < len; i++) {
              color = colors[i];
              liJ = $('<li>').attr('data-color', color).css({
                background: color,
                width: 62,
                height: 62,
                cursor: 'pointer'
              }).mousedown(function(event) {
                color = $(event.target).attr('data-color');
                R.selectedColor = color;
                if (R.selectedTool !== R.tools["Precise path"]) {
                  R.tools["Precise path"].select();
                }
                _this.colorBtn.cloneJ.find('.glyphicon').css({
                  color: R.selectedColor
                });
              });
              ulJ.append(liJ);
            }
            _this.colorBtn.cloneJ.parent().append(ulJ);
          };
        })(this));
        $(window).mouseup(closeColorMenu);
      };

      ToolManager.prototype.createInfoButton = function() {
        this.infoBtn = new Button({
          name: 'Help',
          iconURL: 'icones_info.png',
          favorite: false,
          category: null,
          popover: true,
          order: 1000,
          classes: 'align-end',
          parentJ: $("#user-profile"),
          prepend: true,
          divType: 'div'
        });
        this.infoBtn.btnJ.click(function() {
          var mailJ, modal, welcomeTextJ;
          welcomeTextJ = $('#welcome-text');
          modal = Modal.createModal({
            id: 'info',
            title: 'Welcome to Comme un Dessein',
            submit: (function() {})
          });
          modal.addCustomContent({
            divJ: welcomeTextJ.clone(),
            name: 'welcome-text'
          });
          modal.modalJ.find('[name="cancel"]').hide();
          mailJ = $('<div>' + i18next.t('Contact us at') + ' <a href="mailto:idlv.contact@gmail.com">idlv.contact@gmail.com</a></div>');
          modal.addCustomContent({
            divJ: mailJ
          });
          modal.show();
        });
      };

      ToolManager.prototype.createSubmitButton = function() {
        this.submitButton = new Button({
          name: 'Submit drawing',
          iconURL: 'icones_icon_proposer_02.png',
          classes: 'btn-success displayName',
          parentJ: $('#submit-drawing-button'),
          ignoreFavorite: true,
          onClick: (function(_this) {
            return function() {
              var ref;
              if ((ref = R.tracer) != null) {
                ref.hide();
              }
              R.drawingPanel.submitDrawingClicked();
            };
          })(this)
        });
        this.submitButton.hide();
      };

      ToolManager.prototype.createDeleteButton = function() {
        this.deleteButton = new Button({
          name: 'Delete draft',
          iconURL: 'icones_cancel_02.png',
          classes: 'btn-danger',
          parentJ: $('#submit-drawing-button'),
          ignoreFavorite: true,
          onClick: (function(_this) {
            return function() {
              var draft;
              draft = R.Drawing.getDraft();
              if (draft != null) {
                draft.removePaths(true);
              }
              R.tools['Precise path'].showDraftLimits();
            };
          })(this)
        });
        this.deleteButton.hide();
      };

      ToolManager.prototype.updateButtonsVisibility = function(draft) {
        var ref, ref1;
        if (draft == null) {
          draft = null;
        }
        if (R.selectedTool === R.tools['Precise path'] || R.selectedTool === R.tools.eraser) {
          this.colorBtn.show();
          this.redoBtn.show();
          this.undoBtn.show();
          this.submitButton.show();
          this.deleteButton.show();
          if ((ref = R.tracer) != null) {
            ref.showButton();
          }
          R.tools.eraser.btn.show();
        } else {
          this.colorBtn.hide();
          this.redoBtn.hide();
          this.undoBtn.hide();
          this.submitButton.hide();
          this.deleteButton.hide();
          if ((ref1 = R.tracer) != null) {
            ref1.hideButton();
          }
          R.tools.eraser.btn.hide();
        }
        if (draft == null) {
          draft = R.Drawing.getDraft();
        }
        if ((draft == null) || (draft.paths == null) || draft.paths.length === 0 || (R.drawingPanel.opened && R.drawingPanel.status !== 'information')) {
          this.submitButton.hide();
          this.deleteButton.hide();
        } else {
          this.submitButton.show();
          this.deleteButton.show();
        }
      };

      ToolManager.prototype.enterDrawingMode = function() {
        var id, item, ref;
        if (R.selectedTool !== R.tools['Precise path']) {
          R.tools['Precise path'].select();
        }
        ref = R.items;
        for (id in ref) {
          item = ref[id];
          if (R.items[id].owner === R.me) {
            R.drawingPanel.showSubmitDrawing();
            break;
          }
        }
      };

      ToolManager.prototype.leaveDrawingMode = function(selectTool) {
        if (selectTool == null) {
          selectTool = false;
        }
        if (selectTool) {
          R.tools.select.select(false, true, true);
        }
        R.drawingPanel.hideSubmitDrawing();
      };

      ToolManager.prototype.enableDrawingButton = function(enable) {
        if (enable) {
          R.sidebar.favoriteToolsJ.find("[data-name='Precise path']").css({
            opacity: 1
          });
        } else {
          R.sidebar.favoriteToolsJ.find("[data-name='Precise path']").css({
            opacity: 0.25
          });
        }
      };

      return ToolManager;

    })();
    return ToolManager;
  });

}).call(this);
