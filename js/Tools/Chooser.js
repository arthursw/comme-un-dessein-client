// Generated by CoffeeScript 1.12.7
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['paper', 'R', 'Utils/Utils', 'UI/Button', 'UI/Modal', 'i18next'], function(P, R, Utils, Button, Modal, i18next) {
    var Chooser;
    Chooser = (function() {
      Chooser.cellMargins = 16;

      Chooser.cellWidth = 210 - Chooser.cellMargins;

      Chooser.cellHeight = 297 - Chooser.cellMargins;

      function Chooser() {
        this.drawGrid = bind(this.drawGrid, this);
        this.createChooserButton();
        return;
      }

      Chooser.prototype.createChooserButton = function() {
        this.chooserBtn = new Button({
          name: 'Choose a cell',
          iconURL: 'chooser3.png',
          favorite: true,
          category: null,
          disableHover: true,
          order: null,
          classes: 'displayName'
        });
        return this.chooserBtn.btnJ.click((function(_this) {
          return function() {
            _this.drawGrid();
          };
        })(this));
      };

      Chooser.prototype.drawGrid = function() {
        var line, n, rectangle, x, y;
        if (this.lines == null) {
          this.lines = new P.Group();
        }
        rectangle = R.view.grid.limitCDRectangle;
        x = rectangle.left;
        n = 0;
        while (x < rectangle.right) {
          line = new P.Path();
          line.add(x, rectangle.top);
          line.add(x, rectangle.bottom);
          line.strokeWidth = 1;
          line.strokeColor = 'black';
          line.strokeColor.opacity = 0.75;
          if (n % 2 === 0) {
            line.dashArray = [2, 2];
          }
          line.strokeScaling = false;
          this.lines.addChild(line);
          x += this.constructor.cellWidth;
          n++;
        }
        y = rectangle.top;
        n = 0;
        while (y < rectangle.bottom) {
          line = new P.Path();
          line.add(rectangle.left, y);
          line.add(rectangle.right, y);
          line.strokeWidth = 1;
          line.strokeColor = 'black';
          line.strokeColor.opacity = 0.75;
          if (n % 2 === 0) {
            line.dashArray = [2, 2];
          }
          line.strokeScaling = false;
          this.lines.addChild(line);
          y += this.constructor.cellHeight;
          n++;
        }
      };

      return Chooser;

    })();
    return Chooser;
  });

}).call(this);
