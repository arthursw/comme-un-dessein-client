// Generated by CoffeeScript 1.12.7
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(['paper', 'R', 'Utils/Utils', 'Tools/Tool', 'Items/Item', 'Commands/Command'], function(P, R, Utils, Tool, Item, Command) {
    var ChooseTool;
    ChooseTool = (function(superClass) {
      extend(ChooseTool, superClass);

      ChooseTool.paperMargins = 16;

      ChooseTool.paperWidth = 210 - ChooseTool.paperMargins;

      ChooseTool.paperHeight = 297 - ChooseTool.paperMargins;

      ChooseTool.nSheetsPerTile = 2;

      ChooseTool.label = 'Choose a tile';

      ChooseTool.popover = false;

      ChooseTool.iconURL = R.style === 'line' ? 'chooser3.png' : R.style === 'hand' ? 'chooser3.png' : 'chooser3.png';

      ChooseTool.buttonClasses = 'displayName';

      ChooseTool.cursor = {
        position: {
          x: 0,
          y: 0
        },
        name: 'pointer'
      };

      function ChooseTool() {
        this.drawGrid = bind(this.drawGrid, this);
        ChooseTool.__super__.constructor.call(this, true);
        return;
      }

      ChooseTool.prototype.drawGrid = function() {
        var line, n, rectangle, x, y;
        if (this.lines == null) {
          this.lines = new P.Group();
        }
        rectangle = R.view.grid.limitCDRectangle;
        x = rectangle.left;
        n = 0;
        while (x < rectangle.right) {
          line = new P.Path();
          line.add(x, rectangle.top);
          line.add(x, rectangle.bottom);
          line.strokeWidth = 1;
          line.strokeColor = 'black';
          line.strokeColor.opacity = 0.75;
          if (n % this.constructor.nSheetsPerTile !== 0) {
            line.dashArray = [2, 2];
          }
          line.strokeScaling = false;
          this.lines.addChild(line);
          x += this.constructor.paperWidth;
          n++;
        }
        y = rectangle.top;
        n = 0;
        while (y < rectangle.bottom) {
          line = new P.Path();
          line.add(rectangle.left, y);
          line.add(rectangle.right, y);
          line.strokeWidth = 1;
          line.strokeColor = 'black';
          line.strokeColor.opacity = 0.75;
          if (n % this.constructor.nSheetsPerTile !== 0) {
            line.dashArray = [2, 2];
          }
          line.strokeScaling = false;
          this.lines.addChild(line);
          y += this.constructor.paperHeight;
          n++;
        }
      };

      ChooseTool.prototype.select = function(deselectItems, updateParameters, forceSelect, buttonClicked) {
        if (deselectItems == null) {
          deselectItems = false;
        }
        if (updateParameters == null) {
          updateParameters = true;
        }
        if (forceSelect == null) {
          forceSelect = false;
        }
        if (buttonClicked == null) {
          buttonClicked = false;
        }
        ChooseTool.__super__.select.call(this, false, updateParameters);
        this.drawGrid();
      };

      ChooseTool.prototype.deselect = function() {
        ChooseTool.__super__.deselect.apply(this, arguments);
      };

      ChooseTool.prototype.begin = function(event) {};

      ChooseTool.prototype.update = function(event) {};

      ChooseTool.prototype.move = function(event) {
        var bottom, height, left, right, top, width;
        width = this.constructor.paperWidth * this.constructor.nSheetsPerTile;
        height = this.constructor.paperHeight * this.constructor.nSheetsPerTile;
        if (this.highlight == null) {
          this.highlight = new P.Path.Rectangle(0, 0, width, height);
          this.highlight.strokeWidth = 5;
          this.highlight.strokeScaling = false;
          this.highlight.strokeColor = 'rgb(139, 195, 74)';
        }
        left = R.view.grid.limitCDRectangle.left;
        top = R.view.grid.limitCDRectangle.top;
        right = R.view.grid.limitCDRectangle.right;
        bottom = R.view.grid.limitCDRectangle.bottom;
        this.highlight.position.x = left + (Math.floor((event.point.x - left) / width) + 0.5) * width;
        this.highlight.position.y = top + (Math.floor((event.point.y - top) / height) + 0.5) * height;
        this.highlight.visible = true;
        if (event.point.x < left || event.point.x > right || event.point.y < top || event.point.y > bottom) {
          this.highlight.visible = false;
        }
      };

      ChooseTool.prototype.end = function(event) {};

      ChooseTool.prototype.doubleClick = function(event) {};

      ChooseTool.prototype.keyUp = function(event) {};

      return ChooseTool;

    })(Tool);
    R.Tools.Choose = ChooseTool;
    return ChooseTool;
  });

}).call(this);
