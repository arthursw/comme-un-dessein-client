// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(['paper', 'R', 'Utils/Utils', 'Tools/Tool', 'UI/Button', 'Commands/Command', 'Items/Drawing', 'i18next'], function(P, R, Utils, Tool, Button, Command, Drawing, i18next) {
    var EraserTool;
    EraserTool = (function(superClass) {
      extend(EraserTool, superClass);

      EraserTool.label = 'Eraser';

      EraserTool.iconURL = R.style === 'line' ? 'icones_icon_rubber.png' : R.style === 'romanesco' ? 'eraser.png' : R.style === 'hand' ? 'a-eraser.png' : 'glyphicon-erase';

      EraserTool.cursor = {
        position: {
          x: 0,
          y: 0
        },
        name: 'crosshair'
      };

      EraserTool.drawItems = true;

      EraserTool.emitSocket = false;

      function EraserTool(Path, justCreated) {
        this.Path = Path;
        if (justCreated == null) {
          justCreated = false;
        }
        this.createCircle = bind(this.createCircle, this);
        this.name = this.constructor.label;
        this.radius = 0.1;
        R.tools[this.name] = this;
        this.btnJ = R.sidebar.favoriteToolsJ.find('li[data-name="' + this.name + '"]');
        EraserTool.__super__.constructor.call(this, this.btnJ.length === 0);
        this.pathsToDelete = [];
        this.pathsToCreate = [];
        return;
      }

      EraserTool.prototype.remove = function() {
        this.btnJ.remove();
      };

      EraserTool.prototype.setButtonEraseAll = function() {
        var newName;
        newName = i18next.t('Erase all');
        this.btnJ.addClass('displayName');
        this.btnJ.find('.tool-name').show().attr('data-i18n', newName).text(newName);
        this.btnJ.find('img').attr('src', '/static/images/icons/inverted/icones_cancel.png');
      };

      EraserTool.prototype.setButtonErase = function() {
        this.btnJ.removeClass('displayName');
      };

      EraserTool.prototype.deleteAllPaths = function() {
        var paths, ref;
        paths = ((ref = R.Drawing.getDraft()) != null ? ref.paths : void 0) || [];
        R.drawingPanel.deleteGivenPaths(paths);
        this.setButtonErase();
      };

      EraserTool.prototype.select = function(deselectItems, updateParameters) {
        var draft, i, len, path, ref;
        if (deselectItems == null) {
          deselectItems = true;
        }
        if (updateParameters == null) {
          updateParameters = true;
        }
        draft = Drawing.getDraft();
        if (draft != null) {
          ref = draft.paths;
          for (i = 0, len = ref.length; i < len; i++) {
            path = ref[i];
            path.drawOnPaper();
          }
        }
        $('#draftDrawing').remove();
        EraserTool.__super__.select.apply(this, arguments);
        R.view.tool.onMouseMove = this.move;
      };

      EraserTool.prototype.updateParameters = function() {};

      EraserTool.prototype.deselect = function() {
        var draft, i, len, path, ref;
        draft = Drawing.getDraft();
        if (draft != null) {
          ref = draft.paths;
          for (i = 0, len = ref.length; i < len; i++) {
            path = ref[i];
            path.drawOnSVG();
          }
        }
        EraserTool.__super__.deselect.call(this);
        this.finish();
        if (this.circle != null) {
          this.circle.remove();
          this.circle = null;
          clearInterval(this.circleIntervalID);
        }
        R.view.tool.onMouseMove = null;
      };

      EraserTool.prototype.isPathInCircle = function(path) {
        var circleContainsPoint, i, len, ref, segment, segmentWasFromSplit;
        ref = path.segments;
        for (i = 0, len = ref.length; i < len; i++) {
          segment = ref[i];
          segmentWasFromSplit = (segment.data != null) && segment.data.split;
          circleContainsPoint = segmentWasFromSplit || this.circle.contains(segment.point);
          if (!circleContainsPoint) {
            return false;
          }
        }
        return true;
      };

      EraserTool.prototype.erase = function() {
        var data, draft, i, intersection, intersections, item, j, k, l, len, len1, len2, len3, location, newP, p, path, paths, points, ref, ref1;
        draft = R.Drawing.getDraft();
        if (draft == null) {
          return;
        }
        ref = draft.paths.slice();
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          if ((ref1 = item.getBounds()) != null ? ref1.intersects(this.circle.bounds) : void 0) {
            intersections = this.circle.getCrossings(item.controlPath);
            if (intersections.length > 0) {
              paths = [item.controlPath];
              console.log(intersections);
              for (j = 0, len1 = intersections.length; j < len1; j++) {
                intersection = intersections[j];
                for (k = 0, len2 = paths.length; k < len2; k++) {
                  p = paths[k];
                  location = p.getLocationOf(intersection.point);
                  if (location != null) {
                    console.log('split: ' + location.point);
                    newP = p.split(location);
                    p.lastSegment.handleOut = null;
                    p.lastSegment.data = {
                      split: true
                    };
                    if (newP != null) {
                      paths.push(newP);
                      newP.firstSegment.handleIn = null;
                      newP.firstSegment.data = {
                        split: true
                      };
                    }
                  }
                }
              }
              item.remove();
              for (l = 0, len3 = paths.length; l < len3; l++) {
                p = paths[l];
                if (this.isPathInCircle(p)) {
                  console.log('remove a path');
                  p.remove();
                } else {
                  data = R.Tools.Item.Item.PrecisePath.getDataFromPath(p);
                  points = R.Tools.Item.Item.Path.pathOnPlanetFromPath(p);
                  path = new R.Tools.Item.Item.PrecisePath(Date.now(), data, null, null, points, null, R.me, draft.id);
                  path.draw(false, true, false);
                }
              }
            } else {
              if (this.isPathInCircle(item.controlPath)) {
                item.remove();
              }
            }
          }
        }
      };

      EraserTool.prototype.begin = function(event, from, data) {
        var draft, ref;
        if (from == null) {
          from = R.me;
        }
        if (data == null) {
          data = null;
        }
        if (event.event.which === 2) {
          return;
        }
        if ((ref = R.tracer) != null ? ref.draggingImage : void 0) {
          return;
        }
        this.using = true;
        this.updateCircle(event.point);
        this.circleIntervalID = setInterval(this.createCircle, 20);
        draft = R.Drawing.getDraft();
        this.duplicateData = draft != null ? draft.getDuplicateData() : void 0;
      };

      EraserTool.prototype.update = function(event, from) {
        var ref;
        if (from == null) {
          from = R.me;
        }
        console.log("update");
        this.circle.position = event.point;
        if (!((ref = R.tracer) != null ? ref.draggingImage : void 0)) {
          this.erase();
        }
      };

      EraserTool.prototype.createCircle = function(point) {
        var ref, ref1;
        if (point == null) {
          point = (ref = this.circle) != null ? ref.position : void 0;
        }
        if (!point) {
          return;
        }
        if ((ref1 = this.circle) != null) {
          ref1.remove();
        }
        this.circle = new P.Path.Circle(point, this.radius);
        this.circle.strokeWidth = 1;
        this.circle.strokeColor = '#2fa1d6';
        this.circle.strokeScaling = false;
        R.view.selectionLayer.addChild(this.circle);
        this.circle.sendToBack();
        if (this.radius < 15) {
          this.radius += 0.5;
        }
      };

      EraserTool.prototype.updateCircle = function(point) {
        if (this.circle == null) {
          this.createCircle(point);
        } else {
          this.circle.position = point;
        }
      };

      EraserTool.prototype.move = function(event) {
        R.tools.eraser.updateCircle(event.point);
      };

      EraserTool.prototype.end = function(event, from) {
        var draft, modifyDrawingCommand, ref;
        if (from == null) {
          from = R.me;
        }
        this.circle.position = event.point;
        if (!((ref = R.tracer) != null ? ref.draggingImage : void 0)) {
          this.erase();
        }
        clearInterval(this.circleIntervalID);
        this.radius = 0.1;
        draft = R.Drawing.getDraft();
        if (draft != null) {
          if (this.duplicateData != null) {
            modifyDrawingCommand = new Command.ModifyDrawing(draft, this.duplicateData);
            R.commandManager.add(modifyDrawingCommand, false);
          }
          draft.updatePaths();
          R.toolManager.updateButtonsVisibility(draft);
        }
        this.using = false;
      };

      EraserTool.prototype.finish = function(from) {
        if (from == null) {
          from = R.me;
        }
        return true;
      };

      EraserTool.prototype.keyUp = function(event) {
        var finishingPath;
        switch (event.key) {
          case 'enter':
            if (typeof this.finish === "function") {
              this.finish();
            }
            break;
          case 'escape':
            finishingPath = typeof this.finish === "function" ? this.finish() : void 0;
            if (!finishingPath) {
              R.tools.select.deselectAll();
            }
        }
      };

      return EraserTool;

    })(Tool);
    R.Tools.Eraser = EraserTool;
    return EraserTool;
  });

}).call(this);

//# sourceMappingURL=EraserTool.js.map
