// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(['paper', 'R', 'Utils/Utils', 'Tools/Tool', 'UI/Button', 'Commands/Command', 'Items/Drawing', 'i18next'], function(P, R, Utils, Tool, Button, Command, Drawing, i18next) {
    var ColorTool;
    ColorTool = (function(superClass) {
      extend(ColorTool, superClass);

      ColorTool.label = 'Color';

      ColorTool.iconURL = 'new 1/PaintBrush.svg';

      ColorTool.cursor = {
        position: {
          x: 0,
          y: 0
        },
        name: 'crosshair'
      };

      ColorTool.drawItems = true;

      ColorTool.emitSocket = false;

      ColorTool.buttonClasses = 'dark';

      function ColorTool(Path, justCreated) {
        this.Path = Path;
        if (justCreated == null) {
          justCreated = false;
        }
        this.createCircle = bind(this.createCircle, this);
        this.name = this.constructor.label;
        this.radius = 5;
        R.tools[this.name] = this;
        this.btnJ = R.sidebar.favoriteToolsJ.find('li[data-name="' + this.name + '"]');
        ColorTool.__super__.constructor.call(this, this.btnJ.length === 0);
        this.pathsToDelete = [];
        this.pathsToCreate = [];
        return;
      }

      ColorTool.prototype.remove = function() {
        this.btnJ.remove();
      };

      ColorTool.prototype.setButtonErase = function() {
        this.btnJ.removeClass('displayName');
      };

      ColorTool.prototype.select = function(deselectItems, updateParameters) {
        if (deselectItems == null) {
          deselectItems = true;
        }
        if (updateParameters == null) {
          updateParameters = true;
        }
        $('#draftDrawing').remove();
        ColorTool.__super__.select.apply(this, arguments);
        R.view.tool.onMouseMove = this.move;
      };

      ColorTool.prototype.updateParameters = function() {};

      ColorTool.prototype.deselect = function() {
        ColorTool.__super__.deselect.call(this);
        this.finish();
        if (this.circle != null) {
          this.circle.remove();
          this.circle = null;
          this.visualCircle.remove();
          this.visualCircle = null;
        }
        R.view.tool.onMouseMove = null;
      };

      ColorTool.prototype.isPathInCircle = function(path) {
        var circleContainsPoint, i, len, ref, segment, segmentWasFromSplit;
        ref = path.segments;
        for (i = 0, len = ref.length; i < len; i++) {
          segment = ref[i];
          segmentWasFromSplit = (segment.data != null) && segment.data.split;
          circleContainsPoint = segmentWasFromSplit || this.circle.contains(segment.point);
          if (!circleContainsPoint) {
            return false;
          }
        }
        return true;
      };

      ColorTool.prototype.color = function() {
        var draft, i, intersections, len, path, ref;
        draft = R.Drawing.getDraft();
        if ((draft == null) || (this.circle == null)) {
          return;
        }
        ref = draft.paths.slice();
        for (i = 0, len = ref.length; i < len; i++) {
          path = ref[i];
          if (path.bounds.intersects(this.circle.bounds)) {
            intersections = this.circle.getCrossings(path);
            if (intersections.length > 0 || this.isPathInCircle(path)) {
              path.strokeColor = R.selectedColor;
            }
          }
        }
      };

      ColorTool.prototype.begin = function(event, from, data) {
        var draft, ref;
        if (from == null) {
          from = R.me;
        }
        if (data == null) {
          data = null;
        }
        if (event.event.which === 2) {
          return;
        }
        if ((ref = R.tracer) != null ? ref.draggingImage : void 0) {
          return;
        }
        this.using = true;
        this.updateCircle(event.point);
        draft = R.Drawing.getDraft();
        this.duplicateData = draft != null ? draft.getDuplicateData() : void 0;
      };

      ColorTool.prototype.update = function(event, from) {
        var ref;
        if (from == null) {
          from = R.me;
        }
        console.log("update");
        this.setPosition(event.point);
        if (!((ref = R.tracer) != null ? ref.draggingImage : void 0)) {
          this.color();
        }
      };

      ColorTool.prototype.createCircle = function(point) {
        var ref, ref1, ref2;
        if (point == null) {
          point = (ref = this.circle) != null ? ref.position : void 0;
        }
        if (!point) {
          return;
        }
        if ((ref1 = this.circle) != null) {
          ref1.remove();
        }
        this.circle = new P.Path.Circle(point, this.radius);
        R.view.selectionLayer.addChild(this.circle);
        this.circle.sendToBack();
        if ((ref2 = this.visualCircle) != null) {
          ref2.remove();
        }
        this.visualCircle = new P.Path.Circle(point, this.radius - R.Path.strokeWidth / 2);
        this.visualCircle.strokeWidth = 1;
        this.visualCircle.strokeColor = '#2fa1d6';
        this.visualCircle.strokeScaling = false;
        R.view.selectionLayer.addChild(this.visualCircle);
        this.visualCircle.sendToBack();
      };

      ColorTool.prototype.setPosition = function(point) {
        if (this.circle != null) {
          this.circle.position = point;
          this.visualCircle.position = point;
        }
      };

      ColorTool.prototype.updateCircle = function(point) {
        if (this.circle == null) {
          this.createCircle(point);
        } else {
          this.setPosition(point);
        }
      };

      ColorTool.prototype.move = function(event) {
        R.tools.Color.updateCircle(event.point);
      };

      ColorTool.prototype.end = function(event, from) {
        var draft, modifyDrawingCommand, ref;
        if (from == null) {
          from = R.me;
        }
        this.setPosition(event.point);
        if (!((ref = R.tracer) != null ? ref.draggingImage : void 0)) {
          this.color();
        }
        draft = R.Drawing.getDraft();
        if (draft != null) {
          if (this.duplicateData != null) {
            modifyDrawingCommand = new Command.ModifyDrawing(draft, this.duplicateData);
            R.commandManager.add(modifyDrawingCommand, false);
          }
          draft.updatePaths();
          R.toolManager.updateButtonsVisibility(draft);
        }
        this.using = false;
      };

      ColorTool.prototype.finish = function(from) {
        if (from == null) {
          from = R.me;
        }
        return true;
      };

      ColorTool.prototype.keyUp = function(event) {
        var finishingPath;
        switch (event.key) {
          case 'enter':
            if (typeof this.finish === "function") {
              this.finish();
            }
            break;
          case 'escape':
            finishingPath = typeof this.finish === "function" ? this.finish() : void 0;
            if (!finishingPath) {
              R.tools.select.deselectAll();
            }
        }
      };

      return ColorTool;

    })(Tool);
    R.Tools.ColorTool = ColorTool;
    return ColorTool;
  });

}).call(this);
