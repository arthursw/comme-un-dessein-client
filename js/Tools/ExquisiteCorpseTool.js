// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(['paper', 'R', 'Utils/Utils', 'Tools/PathTool', 'Commands/Command', 'UI/Button', 'i18next'], function(P, R, Utils, PathTool, Command, Button, i18next) {
    var ExquisiteCorpseTool;
    ExquisiteCorpseTool = (function(superClass) {
      extend(ExquisiteCorpseTool, superClass);

      function ExquisiteCorpseTool(Path, justCreated) {
        this.Path = Path;
        if (justCreated == null) {
          justCreated = false;
        }
        this.move = bind(this.move, this);
        ExquisiteCorpseTool.__super__.constructor.call(this, this.Path, justCreated);
        this.ignoreMouseMoves = false;
        return;
      }

      ExquisiteCorpseTool.prototype.select = function(deselectItems, updateParameters, forceSelect, selectedBy) {
        if (deselectItems == null) {
          deselectItems = false;
        }
        if (updateParameters == null) {
          updateParameters = true;
        }
        if (forceSelect == null) {
          forceSelect = false;
        }
        if (selectedBy == null) {
          selectedBy = 'default';
        }
        ExquisiteCorpseTool.__super__.select.call(this, deselectItems, updateParameters, forceSelect, selectedBy);
      };

      ExquisiteCorpseTool.prototype.deselect = function() {
        ExquisiteCorpseTool.__super__.deselect.call(this);
      };

      ExquisiteCorpseTool.prototype.begin = function(event, from, data) {
        var canDraw;
        if (from == null) {
          from = R.me;
        }
        if (data == null) {
          data = null;
        }
        if (P.view.zoom < 0.5) {
          R.alertManager.alert('Please zoom before drawing', 'info');
          return;
        }
        canDraw = R.view.exquisiteCorpseMask.mouseBegin(event);
        if (!canDraw) {
          return;
        }
        ExquisiteCorpseTool.__super__.begin.call(this, event, from, data);
      };

      ExquisiteCorpseTool.prototype.update = function(event, from) {
        var canDraw;
        if (this.currentPath == null) {
          return;
        }
        canDraw = R.view.exquisiteCorpseMask.mouseUpdate(event);
        if (!canDraw) {
          R.alertManager.alert('Your path must fit in a single of your tiles', 'error');
          this.showPathError(event, from);
          return;
        }
        ExquisiteCorpseTool.__super__.update.call(this, event);
      };

      ExquisiteCorpseTool.prototype.move = function(event) {
        var canvas, eventTarget, ref, ref1;
        if (this.ignoreMouseMoves) {
          return;
        }
        canvas = document.getElementById('canvas');
        eventTarget = ((ref = event.originalEvent) != null ? ref.target : void 0) || ((ref1 = event.event) != null ? ref1.target : void 0);
        if (eventTarget !== canvas) {
          return;
        }
        R.view.exquisiteCorpseMask.mouseMove(event);
      };

      ExquisiteCorpseTool.prototype.end = function(event, from) {
        if (from == null) {
          from = R.me;
        }
        ExquisiteCorpseTool.__super__.end.call(this, event, from);
      };

      ExquisiteCorpseTool.prototype.hideOddLines = function() {};

      ExquisiteCorpseTool.prototype.showOddLines = function() {};

      return ExquisiteCorpseTool;

    })(PathTool);
    R.Tools.ExquisiteCorpse = ExquisiteCorpseTool;
    return ExquisiteCorpseTool;
  });

}).call(this);
