// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['paper', 'R', 'Utils/Utils', 'UI/Button'], function(P, R, Utils, Button) {
    var Tool;
    Tool = (function() {
      Tool.label = Tool.name;

      Tool.description = null;

      Tool.iconURL = null;

      Tool.favorite = true;

      Tool.category = null;

      Tool.cursor = {
        position: {
          x: 0,
          y: 0
        },
        name: 'default'
      };

      Tool.drawItems = false;


      /*
      		parameters =
      			'First folder':
      				firstParameter:
      					type: 'slider' 									# type is only required when adding a color (then it must be 'color') or a string input (then it must be 'string')
      																	 * if type is 'string' and there is no onChange nor onFinishChange callback:
      																	 * the default onChange callback will be called on onFinishChange since we often want to update only when the change is finished
      																	 * to override this behaviour, define both onChange and onFinishChange methods
      					label: 'Name of the parameter'					# label of the controller (name displayed in the gui)
      					default: 0 										# default value
      					step: 5 										# values will be incremented/decremented by step
      					min: 0 											# minimum value
      					max: 100 										# maximum value
      					simplified: 0 									# value during the simplified mode (useful to quickly draw an RPath, for example when modifying a curve)
      					defaultFunction: () -> 							# called to get a default value
      					onChange: (value)->  							# called when controller changes
      					onFinishChange: (value)-> 						# called when controller finishes change
      					setValue: (value)-> 							# called on set value of controller
      					defaultCheck: true 								# checked/activated by default or not
      					initializeController: (controller)->			# called just after controller is added to dat.gui, enables to customize the gui and add functionalities
      				secondParameter:
      					type: 'slider'
      					label: 'Second parameter'
      					value: 1
      					min: 0
      					max: 10
      			'Second folder':
      				thirdParameter:
      					type: 'slider'
      					label: 'Third parameter'
      					value: 1
      					min: 0
      					max: 10
       */

      Tool.initializeParameters = function() {
        return {};
      };

      Tool.parameters = Tool.initializeParameters();

      function Tool(createButton) {
        this.select = bind(this.select, this);
        if (createButton) {
          this.createButton();
        }
        this.name = this.constructor.label;
        return;
      }

      Tool.prototype.createButton = function() {
        this.btn = new Button({
          name: this.constructor.label,
          iconURL: this.constructor.iconURL,
          classes: this.constructor.buttonClasses,
          favorite: this.constructor.favorite,
          category: this.constructor.category,
          description: this.constructor.description,
          popover: this.constructor.popover != null ? this.constructor.popover : true,
          order: this.constructor.order
        });
        this.btn.btnJ.click((function(_this) {
          return function() {
            return _this.select(null, null, null, true);
          };
        })(this));
      };

      Tool.prototype.select = function(deselectItems, updateParameters, fromMiddleMouseButton) {
        var ref, ref1, ref2, ref3;
        if (deselectItems == null) {
          deselectItems = true;
        }
        if (updateParameters == null) {
          updateParameters = true;
        }
        if (fromMiddleMouseButton == null) {
          fromMiddleMouseButton = false;
        }
        if (R.selectedTool === this) {
          return;
        }
        if ((ref = this.btn) != null) {
          ref.addClass('btn-info');
        }
        R.previousTool = R.selectedTool;
        if ((ref1 = R.selectedTool) != null) {
          ref1.deselect();
        }
        R.selectedTool = this;
        this.updateCursor();
        if (deselectItems) {
          R.tools.select.deselectAll();
        }
        if (updateParameters) {
          this.updateParameters();
        }
        if (!fromMiddleMouseButton) {
          if ((ref2 = R.toolManager) != null) {
            ref2.updateButtonsVisibility();
          }
        }
        if ((ref3 = R.toolbar) != null) {
          ref3.updateArrowsVisibility();
        }
      };

      Tool.prototype.updateParameters = function() {};

      Tool.prototype.updateCursor = function() {
        if (this.constructor.cursor.icon != null) {
          R.stageJ.css('cursor', 'url(' + location.origin + '/static/images/cursors/' + this.constructor.cursor.icon + '.png) ' + this.constructor.cursor.position.x + ' ' + this.constructor.cursor.position.y + ',' + this.constructor.cursor.name);
        } else {
          R.stageJ.css('cursor', this.constructor.cursor.name);
        }
      };

      Tool.prototype.deselect = function() {
        var ref;
        if ((ref = this.btn) != null) {
          ref.removeClass('btn-info');
        }
      };

      Tool.prototype.begin = function(event) {
        this.using = true;
      };

      Tool.prototype.update = function(event) {};

      Tool.prototype.move = function(event) {};

      Tool.prototype.end = function(event) {
        this.using = false;
      };

      Tool.prototype.keyUp = function(event) {};

      Tool.prototype.disableSnap = function() {
        return false;
      };

      return Tool;

    })();
    R.Tools = {};
    R.tools = {};
    return Tool;
  });

}).call(this);
