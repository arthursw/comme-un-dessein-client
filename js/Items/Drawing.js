// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(['paper', 'R', 'Utils/Utils', 'Items/Item', 'UI/Modal', 'i18next'], function(P, R, Utils, Item, Modal, i18next) {
    var Drawing;
    Drawing = (function(superClass) {
      extend(Drawing, superClass);

      Drawing.label = 'Drawing';

      Drawing.object_type = 'drawing';

      Drawing.pkToId = {};

      Drawing.initialize = function(rectangle) {};

      Drawing.initializeParameters = function() {
        var parameters;
        parameters = Drawing.__super__.constructor.initializeParameters.call(this);
        delete parameters['Style'];
        return parameters;
      };

      Drawing.parameters = Drawing.initializeParameters();

      Drawing.create = function(duplicateData) {
        var copy, i, id, len, ref;
        copy = new this(null, duplicateData.data, duplicateData.id, null, duplicateData.owner, Date.now(), duplicateData.title, duplicateData.description);
        ref = duplicateData.pathIds;
        for (i = 0, len = ref.length; i < len; i++) {
          id = ref[i];
          if (R.items[id] != null) {
            copy.addChild(R.items[id]);
          }
        }
        copy.rasterize();
        R.rasterizer.rasterize(copy, false);
        if (!this.socketAction) {
          copy.save(false);
          R.socket.emit("bounce", {
            itemClass: this.name,
            "function": "create",
            "arguments": [duplicateData]
          });
        }
        return copy;
      };

      Drawing.getDraft = function() {
        var id, item, ref;
        ref = R.items;
        for (id in ref) {
          if (!hasProp.call(ref, id)) continue;
          item = ref[id];
          if (item instanceof Item.Drawing) {
            if (item.owner === R.me && item.status === 'draft') {
              return item;
            }
          }
        }
        return null;
      };

      function Drawing(rectangle1, data1, id1, pk, owner, date, title1, description, status, pathList, svg) {
        this.rectangle = rectangle1;
        this.data = data1 != null ? data1 : null;
        this.id = id1 != null ? id1 : null;
        this.pk = pk != null ? pk : null;
        this.owner = owner != null ? owner : null;
        this.date = date;
        this.title = title1;
        this.description = description;
        this.status = status != null ? status : 'pending';
        if (pathList == null) {
          pathList = [];
        }
        if (svg == null) {
          svg = null;
        }
        this.select = bind(this.select, this);
        this.deleteFromDatabaseCallback = bind(this.deleteFromDatabaseCallback, this);
        this.update = bind(this.update, this);
        this.updateCallback = bind(this.updateCallback, this);
        this.submitCallback = bind(this.submitCallback, this);
        this.saveCallback = bind(this.saveCallback, this);
        this.onLiClick = bind(this.onLiClick, this);
        Drawing.__super__.constructor.call(this, this.data, this.id, this.pk);
        if (this.pk != null) {
          this.constructor.pkToId[this.pk] = this.id;
        }
        if (R.drawings == null) {
          R.drawings = [];
        }
        R.drawings.push(this);
        this.paths = [];
        this.group.remove();
        this.votes = [];
        this.sortedPaths = [];
        this.addToListItem(this.getListItem());
        if (svg != null) {
          this.setSVG(svg);
          if (this.status !== 'draft') {
            return;
          }
        }
        this.addPathsFromPathList(pathList);
        return;
      }

      Drawing.prototype.getPointLists = function() {
        var i, len, path, pointLists, ref;
        pointLists = [];
        ref = this.paths;
        for (i = 0, len = ref.length; i < len; i++) {
          path = ref[i];
          pointLists.push(path.getPoints());
        }
        return pointLists;
      };

      Drawing.prototype.addPathsFromPathList = function(pathList, parseJSON) {
        var data, i, len, p, path, points;
        if (parseJSON == null) {
          parseJSON = true;
        }
        for (i = 0, len = pathList.length; i < len; i++) {
          p = pathList[i];
          points = parseJSON ? JSON.parse(p) : p;
          if (points == null) {
            continue;
          }
          data = {
            points: points,
            planet: new P.Point(0, 0),
            strokeWidth: Item.Path.strokeWidth
          };
          path = new Item.Path.PrecisePath(Date.now(), data, null, null, null, null, R.me, this.id);
          path.pk = path.id;
          path.loadPath();
          path.draw();
        }
      };

      Drawing.prototype.setSVG = function(svg) {
        var doc, layer, layerName, parser;
        layerName = this.getLayerName();
        layer = document.getElementById(layerName);
        parser = new DOMParser();
        doc = parser.parseFromString(svg, "image/svg+xml");
        doc.documentElement.removeAttribute('visibility');
        doc.documentElement.removeAttribute('xmlns');
        doc.documentElement.removeAttribute('stroke');
        if (this.status === 'draft') {
          doc.documentElement.setAttribute('id', 'draftDrawing');
        }
        this.svg = layer.appendChild(doc.documentElement);
      };

      Drawing.prototype.getPathIds = function() {
        var child, i, len, pathIds, ref;
        pathIds = [];
        ref = this.children();
        for (i = 0, len = ref.length; i < len; i++) {
          child = ref[i];
          pathIds.push(child.id);
        }
        return pathIds;
      };

      Drawing.prototype.getDuplicateData = function() {
        var data;
        data = {
          pointLists: this.getPointLists()
        };
        return data;
      };

      Drawing.prototype.setData = function(data) {
        this.removePaths();
        this.addPathsFromPathList(data.pointLists, false);
        if (this.status === 'draft') {
          R.Button.updateSubmitButtonVisibility(this);
        }
        this.updatePaths();
      };

      Drawing.prototype.getListItem = function() {
        var itemListJ;
        itemListJ = null;
        switch (this.status) {
          case 'pending':
            itemListJ = R.view.pendingListJ;
            break;
          case 'drawing':
            itemListJ = R.view.drawingListJ;
            break;
          case 'drawn':
            itemListJ = R.view.drawnListJ;
            break;
          case 'rejected':
            itemListJ = R.view.rejectedListJ;
            break;
          case 'draft':
            itemListJ = R.view.draftListJ;
            break;
          default:
            R.alertManager.alert("Error: drawing status is invalid", "error");
        }
        return itemListJ;
      };

      Drawing.prototype.addToListItem = function(itemListJ1) {
        var nItemsJ, ref, ref1, title;
        this.itemListJ = itemListJ1;
        title = '' + this.title + ' <span data-i18n="by">' + i18next.t('by') + '</span> ' + this.owner;
        this.liJ = $("<li>");
        this.liJ.html(title);
        this.liJ.attr("data-id", this.id);
        this.liJ.click(this.onLiClick);
        this.liJ.mouseover((function(_this) {
          return function(event) {
            _this.highlight();
          };
        })(this));
        this.liJ.mouseout((function(_this) {
          return function(event) {
            _this.unhighlight();
          };
        })(this));
        this.liJ.rItem = this;
        if ((ref = this.itemListJ) != null) {
          ref.find('.rPath-list').prepend(this.liJ);
        }
        nItemsJ = (ref1 = this.itemListJ) != null ? ref1.find(".n-items") : void 0;
        if ((nItemsJ != null) && nItemsJ.length > 0) {
          nItemsJ.html(this.itemListJ.find('.rPath-list').children().length);
        }
      };

      Drawing.prototype.removeFromListItem = function() {
        var nItemsJ, ref;
        this.liJ.remove();
        nItemsJ = (ref = this.itemListJ) != null ? ref.find(".n-items") : void 0;
        if ((nItemsJ != null) && nItemsJ.length > 0) {
          nItemsJ.html(this.itemListJ.find('.rPath-list').children().length);
        }
      };

      Drawing.prototype.onLiClick = function(event) {
        var bounds;
        R.tools.select.deselectAll();
        bounds = this.getBounds();
        if (!P.view.bounds.intersects(bounds)) {
          R.view.moveTo(bounds.center, 1000);
        }
        this.select();
      };

      Drawing.prototype.computeRectangle = function() {
        var bounds, i, len, path, ref;
        if (this.svg != null) {
          this.rectangle = new P.Rectangle(this.svg.getBBox());
          return;
        }
        ref = this.paths;
        for (i = 0, len = ref.length; i < len; i++) {
          path = ref[i];
          bounds = path.getDrawingBounds();
          if (bounds != null) {
            if (this.rectangle == null) {
              this.rectangle = bounds.clone();
            }
            this.rectangle = this.rectangle.unite(bounds);
          }
        }
      };

      Drawing.prototype.getLayer = function() {
        return R.view[this.getLayerName()];
      };

      Drawing.prototype.isVisible = function() {
        var ref;
        return (ref = this.getLayer()) != null ? ref.visible : void 0;
      };

      Drawing.prototype.addPathToProperLayer = function(path) {
        this.group.addChild(path.path);
      };

      Drawing.prototype.addPaths = function() {
        var i, len, path, ref;
        ref = this.paths;
        for (i = 0, len = ref.length; i < len; i++) {
          path = ref[i];
          this.group.addChild(path.path);
          console.log(path.path);
        }
      };

      Drawing.addPaths = function() {
        var drawing, i, len, ref;
        ref = R.drawings;
        for (i = 0, len = ref.length; i < len; i++) {
          drawing = ref[i];
          drawing.addPaths();
        }
      };

      Drawing.prototype.addChild = function(path) {
        var bounds;
        if (this.paths.indexOf(path) >= 0) {
          console.log('path already in drawing');
          return;
        }
        this.paths.push(path);
        path.drawingId = this.id;
        if (this.pathPks == null) {
          this.pathPks = [];
        }
        this.pathPks.push(path.pk);
        this.group.addChild(path.path);
        bounds = path.getDrawingBounds();
        if (bounds != null) {
          if (this.rectangle == null) {
            this.rectangle = bounds.clone();
          }
          this.rectangle = this.rectangle.unite(bounds);
        }
        path.updateStrokeColor();
        path.removeFromListItem();
      };

      Drawing.prototype.replaceDrawing = function() {
        var i, item, len, ref, ref1, ref2;
        if ((this.drawing == null) || (this.drawingRelativePosition == null)) {
          return;
        }
        ref = this.children();
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          item.drawn = false;
          if ((ref1 = item.drawing) != null) {
            ref1.remove();
          }
          if ((ref2 = item.raster) != null) {
            ref2.remove();
          }
        }
        Drawing.__super__.replaceDrawing.call(this);
      };

      Drawing.prototype.removeChild = function(path, updateRectangle, removeID) {
        var pathIndex, pkIndex, ref;
        if (updateRectangle == null) {
          updateRectangle = false;
        }
        if (removeID == null) {
          removeID = true;
        }
        if (removeID) {
          path.drawingId = null;
        }
        pathIndex = this.paths.indexOf(path);
        if (pathIndex >= 0) {
          this.paths.splice(pathIndex, 1);
        }
        if ((ref = path.path) != null) {
          ref.remove();
        }
        path.drawingId = null;
        pkIndex = this.pathPks.indexOf(path.pk);
        if (pkIndex >= 0) {
          this.pathPks.splice(pkIndex, 1);
        }
        if (updateRectangle) {
          this.computeRectangle();
        }
        path.updateStrokeColor();
        path.addToListItem();
        this.drawn = false;
      };

      Drawing.prototype.setParameter = function(name, value, updateGUI, update) {
        Drawing.__super__.setParameter.call(this, name, value, updateGUI, update);
      };

      Drawing.prototype.save = function(addCreateCommand) {
        var args;
        if (addCreateCommand == null) {
          addCreateCommand = true;
        }
        args = {
          city: R.city,
          clientId: this.id,
          date: Date.now(),
          title: this.title || '' + Math.random(),
          description: this.description || '',
          points: this.points
        };
        $.ajax({
          method: "POST",
          url: "ajaxCall/",
          data: {
            data: JSON.stringify({
              "function": 'saveDrawing',
              args: args
            })
          }
        }).done(this.saveCallback);
        Drawing.__super__.save.call(this, false);
      };

      Drawing.prototype.saveCallback = function(result) {
        var args, i, len, path, pointLists, ref;
        R.loader.checkError(result);
        if (result.pk == null) {
          this.remove();
          return;
        }
        this.owner = result.owner;
        this.setPK(result.pk);
        R.socket.emit("drawing change", {
          type: 'new',
          pk: result.pk,
          pathPks: result.pathPks,
          city: R.city
        });
        if (this.selectAfterSave != null) {
          this.select(true, true, true);
        }
        if (this.updateAfterSave != null) {
          this.update(this.updateAfterSave);
        }
        if (this.pathsToSave != null) {
          pointLists = [];
          ref = this.pathsToSave;
          for (i = 0, len = ref.length; i < len; i++) {
            path = ref[i];
            pointLists.push(path.getPoints());
          }
          args = {
            clientId: this.clientId,
            pk: this.pk,
            pointLists: pointLists
          };
          this.pathsToSave = [];
          $.ajax({
            method: "POST",
            url: "ajaxCall/",
            data: {
              data: JSON.stringify({
                "function": 'addPathsToDrawing',
                args: args
              })
            }
          }).done(R.loader.checkError);
        }
        Drawing.__super__.saveCallback.apply(this, arguments);
      };

      Drawing.prototype.addPathToSave = function(path) {
        if (this.pathsToSave == null) {
          this.pathsToSave = [];
        }
        this.pathsToSave.push(path);
      };

      Drawing.prototype.getLayerName = function() {
        return this.status + 'Layer';
      };

      Drawing.prototype.getBounds = function() {
        if (this.rectangle == null) {
          this.computeRectangle();
        }
        return this.rectangle;
      };

      Drawing.prototype.getSVG = function(asString) {
        var i, len, path, ref;
        if (asString == null) {
          asString = true;
        }
        if ((this.paths != null) && this.paths.length > 0) {
          ref = this.paths;
          for (i = 0, len = ref.length; i < len; i++) {
            path = ref[i];
            this.group.addChild(path.path);
          }
          return this.group.exportSVG({
            asString: asString
          });
        } else {
          return this.svg;
        }
      };

      Drawing.prototype.submit = function() {
        var args, svg;
        svg = this.getSVG();
        this.svgString = svg;
        args = {
          pk: this.pk,
          clientId: this.id,
          date: Date.now(),
          title: this.title,
          description: this.description,
          svg: svg
        };
        $.ajax({
          method: "POST",
          url: "ajaxCall/",
          data: {
            data: JSON.stringify({
              "function": 'submitDrawing',
              args: args
            })
          }
        }).done(this.submitCallback);
      };

      Drawing.prototype.removePaths = function(addCommand) {
        var i, len, path, ref;
        if (addCommand == null) {
          addCommand = false;
        }
        if (addCommand) {
          R.commandManager.add(new R.Command.ModifyDrawing(this));
        }
        ref = this.paths.slice();
        for (i = 0, len = ref.length; i < len; i++) {
          path = ref[i];
          path.remove();
        }
        if (this.status === 'draft') {
          R.Button.updateSubmitButtonVisibility(this);
        }
        if (addCommand) {
          this.updatePaths();
        }
      };

      Drawing.prototype.submitCallback = function(result) {
        if (!R.loader.checkError(result)) {
          return;
        }
        R.commandManager.clearHistory();
        this.status = 'pending';
        this.removePaths();
        this.setSVG(this.svgString);
        this.svgString = null;
        R.alertManager.alert("Drawing successfully submitted", "success", null, {
          positiveVoteThreshold: result.positiveVoteThreshold
        });
        this.status = 'pending';
        R.socket.emit("drawing change", {
          type: 'status',
          pk: result.pk,
          status: this.status,
          city: R.city
        });
      };

      Drawing.prototype.updatePaths = function() {
        var args;
        this.computeRectangle();
        args = {
          clientId: this.id,
          pk: this.pk,
          pointLists: this.getPointLists()
        };
        $.ajax({
          method: "POST",
          url: "ajaxCall/",
          data: {
            data: JSON.stringify({
              "function": 'setPathsToDrawing',
              args: args
            })
          }
        }).done(R.loader.checkError);
      };

      Drawing.prototype.addUpdateFunctionAndArguments = function(args, type) {
        var i, item, len, ref;
        ref = this.children();
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          item.addUpdateFunctionAndArguments(args, type);
        }
      };

      Drawing.prototype.updateCallback = function(result) {
        var contentJ;
        if (!R.loader.checkError(result)) {
          this.title = this.previousTitle;
          this.description = this.previousDescription;
          contentJ = R.drawingPanel.drawingPanelJ.find('.content');
          contentJ.find('#drawing-title').val(this.title);
          contentJ.find('#drawing-description').val(this.description);
          return;
        }
        R.alertManager.alert("Drawing successfully modified", "success");
        R.socket.emit("drawing change", {
          type: 'description',
          title: this.title,
          description: this.description,
          drawingId: this.id
        });
      };

      Drawing.prototype.update = function(data) {
        var args;
        if (this.pk == null) {
          this.updateAfterSave = data;
          return;
        }
        delete this.updateAfterSave;
        this.previousTitle = this.title;
        this.previousDescription = this.description;
        this.title = data.title;
        this.description = data.description;
        args = {
          pk: this.pk,
          title: this.title,
          description: this.description
        };
        $.ajax({
          method: "POST",
          url: "ajaxCall/",
          data: {
            data: JSON.stringify({
              "function": 'updateDrawing',
              args: args
            })
          }
        }).done(this.updateCallback);
      };

      Drawing.prototype.deleteFromDatabaseCallback = function() {
        var i, id, len, ref;
        id = this.id;
        if (!R.loader.checkError()) {
          if (this.pathIdsBeforeRemove != null) {
            ref = this.pathIdsBeforeRemove;
            for (i = 0, len = ref.length; i < len; i++) {
              id = ref[i];
              if (R.items[id] != null) {
                this.addChild(R.items[id]);
              }
            }
            this.rasterize();
            R.rasterizer.rasterize(this, false);
          }
          return;
        }
        Drawing.__super__.deleteFromDatabaseCallback.call(this);
        R.alertManager.alert("Drawing successfully cancelled", "success");
        R.socket.emit("drawing change", {
          type: 'delete',
          drawingId: id
        });
      };

      Drawing.prototype["delete"] = function() {
        var deffered;
        this.pathIdsBeforeRemove = this.getPathIds();
        deffered = Drawing.__super__["delete"].apply(this, arguments);
        return deffered;
      };

      Drawing.prototype.deleteFromDatabase = function() {
        $.ajax({
          method: "POST",
          url: "ajaxCall/",
          data: {
            data: JSON.stringify({
              "function": 'deleteDrawing',
              args: {
                'pk': this.pk
              }
            })
          }
        }).done(this.deleteFromDatabaseCallback());
      };

      Drawing.prototype.setRectangle = function(rectangle, update) {
        if (update == null) {
          update = true;
        }
        Drawing.__super__.setRectangle.call(this, rectangle, update);
      };

      Drawing.prototype.moveTo = function(position, update) {
        var delta, i, item, len, ref;
        delta = position.subtract(this.rectangle.center);
        ref = this.children();
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          item.rectangle.center.x += delta.x;
          item.rectangle.center.y += delta.y;
          if (Item.Div.prototype.isPrototypeOf(item)) {
            item.updateTransform();
          }
        }
        Drawing.__super__.moveTo.call(this, position, update);
      };

      Drawing.prototype.containsChildren = function() {
        var i, item, len, ref;
        ref = this.children();
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          if (!this.rectangle.contains(item.getBounds())) {
            return false;
          }
        }
        return true;
      };

      Drawing.prototype.showChildren = function() {
        var i, item, len, ref, ref1;
        ref = this.children();
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          if ((ref1 = item.group) != null) {
            ref1.visible = true;
          }
        }
      };

      Drawing.prototype.updateDrawingPanel = function() {
        var args;
        args = {
          pk: this.pk
        };
        $.ajax({
          method: "POST",
          url: "ajaxCall/",
          data: {
            data: JSON.stringify({
              "function": 'loadDrawing',
              args: args
            })
          }
        }).done((function(_this) {
          return function(result) {
            return R.drawingPanel.setDrawing(_this, result);
          };
        })(this));
      };

      Drawing.prototype.updateStatus = function(status) {
        var i, len, path, ref;
        this.status = status;
        this.removeFromListItem();
        this.addToListItem(this.getListItem());
        ref = this.paths;
        for (i = 0, len = ref.length; i < len; i++) {
          path = ref[i];
          path.updateStrokeColor();
          path.drawn = false;
          path.draw();
          path.rasterize();
          path.group.visible = true;
        }
        R.rasterizer.rasterizeRectangle(this.rectangle);
      };

      Drawing.prototype.select = function(updateOptions, showPanelAndLoad, force) {
        var i, item, len, ref;
        if (updateOptions == null) {
          updateOptions = true;
        }
        if (showPanelAndLoad == null) {
          showPanelAndLoad = true;
        }
        if (force == null) {
          force = false;
        }
        if (!Drawing.__super__.select.call(this, updateOptions, force)) {
          return false;
        }
        ref = this.children();
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          item.deselect();
        }
        if (showPanelAndLoad) {
          R.drawingPanel.selectionChanged();
        }
        return true;
      };

      Drawing.prototype.deselect = function(updateOptions) {
        if (updateOptions == null) {
          updateOptions = true;
        }
        if (!Drawing.__super__.deselect.call(this, updateOptions)) {
          return false;
        }
        R.drawingPanel.deselectDrawing(this);
        return true;
      };

      Drawing.prototype.remove = function() {
        this.removeFromListItem();
        R.rasterizer.rasterizeRectangle(this.rectangle);
        Drawing.__super__.remove.apply(this, arguments);
      };

      Drawing.prototype.getRaster = function() {
        var group, i, len, path, ref;
        if (this.pathRaster != null) {
          return this.pathRaster;
        }
        if (this.paths.length === 0) {
          return null;
        }
        group = new P.Group();
        ref = this.paths;
        for (i = 0, len = ref.length; i < len; i++) {
          path = ref[i];
          if (path.raster != null) {
            group.addChild(path.raster.clone());
          } else {
            if (path.drawing == null) {
              path.draw();
            }
            group.addChild(path.drawing.clone());
          }
        }
        this.pathRaster = group.rasterize(P.view.resolution, false);
        group.remove();
        return this.pathRaster;
      };

      Drawing.prototype.children = function() {
        return this.paths;
      };

      Drawing.prototype.highlight = function(color) {
        Drawing.__super__.highlight.call(this);
        if (color) {
          this.highlightRectangle.fillColor = color;
          this.highlightRectangle.strokeColor = color;
          this.highlightRectangle.dashArray = [];
        }
      };

      Drawing.prototype.rasterize = function() {};

      return Drawing;

    })(Item);
    Item.Drawing = Drawing;
    R.Drawing = Drawing;
    return Drawing;
  });

}).call(this);
