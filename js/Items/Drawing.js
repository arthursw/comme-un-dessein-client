// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(['paper', 'R', 'Utils/Utils', 'Items/Item', 'UI/Modal'], function(P, R, Utils, Item, Modal) {
    var Drawing;
    Drawing = (function(superClass) {
      extend(Drawing, superClass);

      Drawing.label = 'Drawing';

      Drawing.object_type = 'drawing';

      Drawing.pkToId = {};

      Drawing.initialize = function(rectangle) {};

      Drawing.initializeParameters = function() {
        var parameters;
        parameters = Drawing.__super__.constructor.initializeParameters.call(this);
        delete parameters['Style'];
        return parameters;
      };

      Drawing.parameters = Drawing.initializeParameters();

      Drawing.create = function(duplicateData) {
        var copy, i, id, len, ref;
        copy = new this(null, duplicateData.data, duplicateData.id, null, duplicateData.owner, Date.now(), duplicateData.title, duplicateData.description);
        ref = duplicateData.pathIds;
        for (i = 0, len = ref.length; i < len; i++) {
          id = ref[i];
          if (R.items[id] != null) {
            copy.addChild(R.items[id]);
          }
        }
        copy.rasterize();
        R.rasterizer.rasterize(copy, false);
        if (!this.socketAction) {
          copy.save(false);
          R.socket.emit("bounce", {
            itemClass: this.name,
            "function": "create",
            "arguments": [duplicateData]
          });
        }
        return copy;
      };

      function Drawing(rectangle1, data1, id1, pk, owner, date, title1, description, status) {
        var id, path, ref, ref1;
        this.rectangle = rectangle1;
        this.data = data1 != null ? data1 : null;
        this.id = id1 != null ? id1 : null;
        this.pk = pk != null ? pk : null;
        this.owner = owner != null ? owner : null;
        this.date = date;
        this.title = title1;
        this.description = description;
        this.status = status != null ? status : 'pending';
        this.select = bind(this.select, this);
        this.deleteFromDatabaseCallback = bind(this.deleteFromDatabaseCallback, this);
        this.update = bind(this.update, this);
        this.updateCallback = bind(this.updateCallback, this);
        this.saveCallback = bind(this.saveCallback, this);
        this.onLiClick = bind(this.onLiClick, this);
        Drawing.__super__.constructor.call(this, this.data, this.id, this.pk);
        if (this.pk != null) {
          this.constructor.pkToId[this.pk] = this.id;
        }
        this.drawing = new P.Group();
        this.group.addChild(this.drawing);
        this.votes = [];
        if (this.id === "9440088493130252-1501788953971") {
          ref = R.paths;
          for (id in ref) {
            path = ref[id];
            if ((path.drawingId != null) && (path.drawingId === this.id || path.drawingId === this.pk)) {
              console.log("drawing adds loaded path: ", path);
            }
          }
        }
        ref1 = R.paths;
        for (id in ref1) {
          path = ref1[id];
          if ((path.drawingId != null) && (path.drawingId === this.id || path.drawingId === this.pk)) {
            this.addChild(path);
          }
        }
        this.sortedPaths = [];
        this.addToListItem(this.getListItem());
        return;
      }

      Drawing.prototype.getPathIds = function() {
        var child, i, len, pathIds, ref;
        pathIds = [];
        ref = this.children();
        for (i = 0, len = ref.length; i < len; i++) {
          child = ref[i];
          pathIds.push(child.id);
        }
        return pathIds;
      };

      Drawing.prototype.getDuplicateData = function() {
        var data;
        data = Drawing.__super__.getDuplicateData.apply(this, arguments);
        data.title = this.title;
        data.description = this.description;
        data.pathIds = this.getPathIds();
        return data;
      };

      Drawing.prototype.getListItem = function() {
        var itemListJ;
        itemListJ = null;
        switch (this.status) {
          case 'pending':
            R.view.pendingLayer.addChild(this.group);
            itemListJ = R.view.pendingListJ;
            break;
          case 'drawing':
            R.view.drawingLayer.addChild(this.group);
            itemListJ = R.view.drawingListJ;
            break;
          case 'drawn':
            R.view.drawnLayer.addChild(this.group);
            itemListJ = R.view.drawnListJ;
            break;
          case 'rejected':
            R.view.rejectedLayer.addChild(this.group);
            itemListJ = R.view.rejectedListJ;
            break;
          default:
            R.alertManager.alert("Error: drawing status is invalid.", "error");
        }
        return itemListJ;
      };

      Drawing.prototype.addToListItem = function(itemListJ1) {
        var nItemsJ, ref, ref1, title;
        this.itemListJ = itemListJ1;
        title = '' + this.title + ' by ' + this.owner;
        this.liJ = $("<li>");
        this.liJ.html(title);
        this.liJ.attr("data-id", this.id);
        this.liJ.click(this.onLiClick);
        this.liJ.mouseover((function(_this) {
          return function(event) {
            _this.highlight();
          };
        })(this));
        this.liJ.mouseout((function(_this) {
          return function(event) {
            _this.unhighlight();
          };
        })(this));
        this.liJ.rItem = this;
        if ((ref = this.itemListJ) != null) {
          ref.find('.rPath-list').prepend(this.liJ);
        }
        nItemsJ = (ref1 = this.itemListJ) != null ? ref1.find(".n-items") : void 0;
        if ((nItemsJ != null) && nItemsJ.length > 0) {
          nItemsJ.html(this.itemListJ.find('.rPath-list').children().length);
        }
      };

      Drawing.prototype.removeFromListItem = function() {
        var nItemsJ, ref;
        this.liJ.remove();
        nItemsJ = (ref = this.itemListJ) != null ? ref.find(".n-items") : void 0;
        if ((nItemsJ != null) && nItemsJ.length > 0) {
          nItemsJ.html(this.itemListJ.find('.rPath-list').children().length);
        }
      };

      Drawing.prototype.onLiClick = function(event) {
        var bounds;
        R.tools.select.deselectAll();
        bounds = this.getBounds();
        if (!P.view.bounds.intersects(bounds)) {
          R.view.moveTo(bounds.center, 1000);
        }
        this.select();
      };

      Drawing.prototype.computeRectangle = function() {
        var bounds, child, path;
        for (child in this.drawing.children) {
          path = child.controller;
          if (path == null) {
            continue;
          }
          bounds = path.getDrawingBounds();
          if (bounds != null) {
            if (this.rectangle == null) {
              this.rectangle = bounds.clone();
            }
            this.rectangle = this.rectangle.unite(bounds);
          }
        }
      };

      Drawing.prototype.addChild = function(path) {
        var bounds;
        path.drawingId = this.id;
        path.group.visible = true;
        if (this.pathPks == null) {
          this.pathPks = [];
        }
        if (path.pk == null) {
          R.alertManager.alert('Error: a path has not been saved yet. Please wait until the path is saved before creating the drawing.', 'error');
          return;
        }
        this.pathPks.push(path.pk);
        this.drawing.addChild(path.group);
        bounds = path.getDrawingBounds();
        if (bounds != null) {
          if (this.rectangle == null) {
            this.rectangle = bounds.clone();
          }
          this.rectangle = this.rectangle.unite(bounds);
        }
        path.updateStrokeColor();
        path.removeFromListItem();
        this.drawn = false;
        if ((this.raster != null) && this.raster.parent !== null) {
          this.replaceDrawing();
          R.rasterizer.rasterize(this);
        }
      };

      Drawing.prototype.replaceDrawing = function() {
        var i, item, len, ref, ref1, ref2;
        if ((this.drawing == null) || (this.drawingRelativePosition == null)) {
          return;
        }
        ref = this.children();
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          item.drawn = false;
          if ((ref1 = item.drawing) != null) {
            ref1.remove();
          }
          if ((ref2 = item.raster) != null) {
            ref2.remove();
          }
        }
        Drawing.__super__.replaceDrawing.call(this);
      };

      Drawing.prototype.removeChild = function(path, updateRectangle, updateRaster) {
        var pkIndex;
        if (updateRectangle == null) {
          updateRectangle = true;
        }
        if (updateRaster == null) {
          updateRaster = false;
        }
        path.drawingId = null;
        pkIndex = this.pathPks.indexOf(path.pk);
        if (pkIndex >= 0) {
          this.pathPks.splice(pkIndex, 1);
        }
        R.view.mainLayer.addChild(path.group);
        if (updateRectangle) {
          this.computeRectangle();
        }
        path.updateStrokeColor();
        path.addToListItem();
        this.drawn = false;
        if (updateRaster && (this.raster != null) && this.raster.parent !== null) {
          this.replaceDrawing();
        }
        R.rasterizer.rasterize(path, false);
        if (typeof path.draw === "function") {
          path.draw();
        }
        path.rasterize();
      };

      Drawing.prototype.setParameter = function(name, value, updateGUI, update) {
        Drawing.__super__.setParameter.call(this, name, value, updateGUI, update);
      };

      Drawing.prototype.save = function(addCreateCommand) {
        var args;
        if (addCreateCommand == null) {
          addCreateCommand = true;
        }
        if (R.view.grid.rectangleOverlapsTwoPlanets(this.rectangle)) {
          return;
        }
        if (this.rectangle["with"] === 0 && this.rectangle.height === 0 || this.drawing.children.length === 0) {
          this.remove();
          R.alertManager.alert("Error: The drawing is empty.", "error");
          return;
        }
        args = {
          clientId: this.id,
          date: this.date,
          pathPks: this.pathPks,
          title: this.title,
          description: this.description
        };
        $.ajax({
          method: "POST",
          url: "ajaxCall/",
          data: {
            data: JSON.stringify({
              "function": 'saveDrawing',
              args: args
            })
          }
        }).done(this.saveCallback);
        Drawing.__super__.save.call(this, addCreateCommand);
      };

      Drawing.prototype.saveCallback = function(result) {
        R.loader.checkError(result);
        if (result.pk == null) {
          this.remove();
          return;
        }
        this.owner = result.owner;
        this.setPK(result.pk);
        R.alertManager.alert("Drawing successfully submitted. It will be drawn if it gets 100 votes.", "success");
        if (this.selectAfterSave != null) {
          this.select(true, true, true);
        }
        if (this.updateAfterSave != null) {
          this.update(this.updateAfterSave);
        }
        Drawing.__super__.saveCallback.apply(this, arguments);
      };

      Drawing.prototype.addUpdateFunctionAndArguments = function(args, type) {
        var i, item, len, ref;
        ref = this.children();
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          item.addUpdateFunctionAndArguments(args, type);
        }
      };

      Drawing.prototype.updateCallback = function(result) {
        var contentJ;
        if (!R.loader.checkError(result)) {
          this.title = this.previousTitle;
          this.description = this.previousDescription;
          contentJ = R.drawingPanel.drawingPanelJ.find('.content');
          contentJ.find('#drawing-title').val(this.title);
          contentJ.find('#drawing-description').val(this.description);
          return;
        }
        R.alertManager.alert("Drawing successfully modified.", "success");
      };

      Drawing.prototype.update = function(data) {
        var args;
        if (this.pk == null) {
          this.updateAfterSave = data;
          return;
        }
        delete this.updateAfterSave;
        this.previousTitle = this.title;
        this.previousDescription = this.description;
        this.title = data.title;
        this.description = data.description;
        args = {
          pk: this.pk,
          title: this.title,
          description: this.description
        };
        $.ajax({
          method: "POST",
          url: "ajaxCall/",
          data: {
            data: JSON.stringify({
              "function": 'updateDrawing',
              args: args
            })
          }
        }).done(this.updateCallback);
      };

      Drawing.prototype.deleteFromDatabaseCallback = function() {
        var i, id, len, ref;
        if (!R.loader.checkError()) {
          if (this.pathIdsBeforeRemove != null) {
            ref = this.pathIdsBeforeRemove;
            for (i = 0, len = ref.length; i < len; i++) {
              id = ref[i];
              if (R.items[id] != null) {
                this.addChild(R.items[id]);
              }
            }
            this.rasterize();
            R.rasterizer.rasterize(this, false);
          }
          return;
        }
        Drawing.__super__.deleteFromDatabaseCallback.call(this);
        R.alertManager.alert("Drawing successfully cancelled.", "success");
      };

      Drawing.prototype["delete"] = function() {
        this.pathIdsBeforeRemove = this.getPathIds();
        Drawing.__super__["delete"].apply(this, arguments);
      };

      Drawing.prototype.deleteFromDatabase = function() {
        $.ajax({
          method: "POST",
          url: "ajaxCall/",
          data: {
            data: JSON.stringify({
              "function": 'deleteDrawing',
              args: {
                'pk': this.pk
              }
            })
          }
        }).done(this.deleteFromDatabaseCallback());
      };

      Drawing.prototype.setRectangle = function(rectangle, update) {
        if (update == null) {
          update = true;
        }
        Drawing.__super__.setRectangle.call(this, rectangle, update);
      };

      Drawing.prototype.moveTo = function(position, update) {
        var delta, i, item, len, ref;
        delta = position.subtract(this.rectangle.center);
        ref = this.children();
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          item.rectangle.center.x += delta.x;
          item.rectangle.center.y += delta.y;
          if (Item.Div.prototype.isPrototypeOf(item)) {
            item.updateTransform();
          }
        }
        Drawing.__super__.moveTo.call(this, position, update);
      };

      Drawing.prototype.containsChildren = function() {
        var i, item, len, ref;
        ref = this.children();
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          if (!this.rectangle.contains(item.getBounds())) {
            return false;
          }
        }
        return true;
      };

      Drawing.prototype.showChildren = function() {
        var i, item, len, ref, ref1;
        ref = this.children();
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          if ((ref1 = item.group) != null) {
            ref1.visible = true;
          }
        }
      };

      Drawing.prototype.updateDrawingPanel = function() {
        var args;
        args = {
          pk: this.pk
        };
        $.ajax({
          method: "POST",
          url: "ajaxCall/",
          data: {
            data: JSON.stringify({
              "function": 'loadDrawing',
              args: args
            })
          }
        }).done((function(_this) {
          return function(result) {
            return R.drawingPanel.setDrawing(_this, result);
          };
        })(this));
      };

      Drawing.prototype.select = function(updateOptions, showPanelAndLoad, force) {
        var i, item, len, ref;
        if (updateOptions == null) {
          updateOptions = true;
        }
        if (showPanelAndLoad == null) {
          showPanelAndLoad = true;
        }
        if (force == null) {
          force = false;
        }
        if (!Drawing.__super__.select.call(this, updateOptions, force)) {
          return false;
        }
        ref = this.children();
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          item.deselect();
        }
        if (showPanelAndLoad) {
          R.drawingPanel.selectionChanged();
        }
        return true;
      };

      Drawing.prototype.deselect = function(updateOptions) {
        if (updateOptions == null) {
          updateOptions = true;
        }
        if (!Drawing.__super__.deselect.call(this, updateOptions)) {
          return false;
        }
        R.drawingPanel.deselectDrawing(this);
        return true;
      };

      Drawing.prototype.remove = function() {
        var i, len, path, ref;
        ref = this.children();
        for (i = 0, len = ref.length; i < len; i++) {
          path = ref[i];
          path.remove();
        }
        this.removeFromListItem();
        Drawing.__super__.remove.apply(this, arguments);
      };

      Drawing.prototype.children = function() {
        var child, i, len, paths, ref;
        paths = [];
        ref = this.drawing.children;
        for (i = 0, len = ref.length; i < len; i++) {
          child = ref[i];
          if (child.controller != null) {
            paths.push(child.controller);
          }
        }
        return paths;
      };

      Drawing.prototype.highlight = function(color) {
        Drawing.__super__.highlight.call(this);
        if (color) {
          this.highlightRectangle.fillColor = color;
          this.highlightRectangle.strokeColor = color;
          this.highlightRectangle.dashArray = [];
        }
      };

      Drawing.prototype.drawChildren = function() {
        var child, i, len, ref, ref1;
        if (this.drawing.children.length === 0) {
          return;
        }
        ref = this.drawing.children;
        for (i = 0, len = ref.length; i < len; i++) {
          child = ref[i];
          if ((ref1 = child.controller) != null) {
            if (typeof ref1.draw === "function") {
              ref1.draw();
            }
          }
        }
      };

      Drawing.prototype.rasterize = function() {
        if ((this.raster != null) || (this.drawing == null)) {
          return;
        }
        this.drawChildren();
        Drawing.__super__.rasterize.call(this);
      };

      return Drawing;

    })(Item);
    Item.Drawing = Drawing;
    return Drawing;
  });

}).call(this);
