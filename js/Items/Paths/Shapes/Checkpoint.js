// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(['Items/Paths/Shapes/Shape'], function(Shape) {
    var Checkpoint;
    Checkpoint = (function(superClass) {
      extend(Checkpoint, superClass);

      function Checkpoint() {
        return Checkpoint.__super__.constructor.apply(this, arguments);
      }

      Checkpoint.Shape = P.Path.Rectangle;

      Checkpoint.label = 'Checkpoint';

      Checkpoint.description = "Draw checkpoints on a lock with a Racer to create a race\n(the players must go through each checkpoint as fast as possible, with the car tool).";

      Checkpoint.category = 'Video game/Racer';

      Checkpoint.squareByDefault = false;

      Checkpoint.initializeParameters = function() {
        return {};
      };

      Checkpoint.parameters = Checkpoint.initializeParameters();

      Checkpoint.createTool(Checkpoint);

      Checkpoint.prototype.initialize = function() {
        var base;
        this.data.type = 'checkpoint';
        if (this.lock != null) {
          if (this.lock.checkpoints.indexOf(this) < 0) {
            this.lock.checkpoints.push(this);
          }
          if ((base = this.data).checkpointNumber == null) {
            base.checkpointNumber = this.game.checkpoints.indexOf(this);
          }
        } else {
          R.alertManager.alert('A checkpoint must be placed on a lock', 'error');
          this.remove();
        }
      };

      Checkpoint.prototype.createShape = function() {
        this.data.strokeColor = 'rgb(150,30,30)';
        this.data.fillColor = null;
        this.shape = this.addPath(new P.Path.Rectangle(this.rectangle));
        this.text = this.addPath(new P.PointText(this.rectangle.center.add(0, 4)));
        this.text.content = this.data.checkpointNumber != null ? 'Checkpoint ' + this.data.checkpointNumber : 'Checkpoint';
        this.text.justification = 'center';
      };

      Checkpoint.prototype.contains = function(point) {
        var delta;
        delta = point.subtract(this.rectangle.center);
        delta.rotation = -this.rotation;
        return this.rectangle.contains(this.rectangle.center.add(delta));
      };

      Checkpoint.prototype.remove = function() {
        var ref;
        if (((ref = this.lock) != null ? ref.checkpoints : void 0) != null) {
          Utils.Array.remove(this.lock.checkpoints, this);
        }
        Checkpoint.__super__.remove.call(this);
      };

      return Checkpoint;

    })(Shape);
    return Checkpoint;
  });

}).call(this);
