// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(['paper', 'R', 'Utils/Utils', 'Items/Paths/Shapes/Shape'], function(P, R, Utils, Shape) {
    var StarShape;
    StarShape = (function(superClass) {
      extend(StarShape, superClass);

      function StarShape() {
        this.onFrame = bind(this.onFrame, this);
        return StarShape.__super__.constructor.apply(this, arguments);
      }

      StarShape.Shape = P.Path.Star;

      StarShape.category = 'Shape/Animated';

      StarShape.label = 'Star';

      StarShape.description = "Draws a star which can be animated (the color changes and it rotates).";

      StarShape.iconURL = 'static/images/icons/inverted/star.png';

      StarShape.initializeParameters = function() {
        var parameters;
        parameters = StarShape.__super__.constructor.initializeParameters.call(this);
        if (parameters['Style'] == null) {
          parameters['Style'] = {};
        }
        parameters['Style'].nPoints = {
          type: 'slider',
          label: 'N points',
          min: 1,
          max: 100,
          "default": 5,
          step: 1
        };
        parameters['Style'].internalRadius = {
          type: 'slider',
          label: 'Internal radius',
          min: -200,
          max: 100,
          "default": 38
        };
        parameters['Style'].rsmooth = {
          type: 'checkbox',
          label: 'Smooth',
          "default": false
        };
        parameters['Style'].animate = {
          type: 'checkbox',
          label: 'Animate',
          "default": false
        };
        return parameters;
      };

      StarShape.parameters = StarShape.initializeParameters();

      StarShape.createTool(StarShape);

      StarShape.prototype.initialize = function() {
        this.setAnimated(this.data.animate);
      };

      StarShape.prototype.createShape = function() {
        var externalRadius, internalRadius, rectangle;
        rectangle = this.rectangle;
        if (this.data.internalRadius > -100) {
          externalRadius = rectangle.width / 2;
          internalRadius = externalRadius * this.data.internalRadius / 100;
        } else {
          internalRadius = rectangle.width / 2;
          externalRadius = internalRadius * 100 / this.data.internalRadius;
        }
        this.shape = this.addPath(new this.constructor.Shape(rectangle.center, this.data.nPoints, externalRadius, internalRadius));
        if (this.data.rsmooth) {
          this.shape.smooth();
        }
      };

      StarShape.prototype.onFrame = function(event) {
        this.shape.strokeColor.hue += 1;
        this.shape.rotation += 1;
      };

      return StarShape;

    })(Shape);
    return StarShape;
  });

}).call(this);
