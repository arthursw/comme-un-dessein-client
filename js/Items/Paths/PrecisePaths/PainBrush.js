// Generated by CoffeeScript 1.12.7
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(['paper', 'R', 'Utils/Utils', 'Items/Paths/PrecisePaths/StepPath'], function(P, R, Utils, StepPath) {
    var PaintBrush;
    PaintBrush = (function(superClass) {
      extend(PaintBrush, superClass);

      function PaintBrush() {
        return PaintBrush.__super__.constructor.apply(this, arguments);
      }

      PaintBrush.label = 'Paint brush';

      PaintBrush.description = "Paints a thick stroke with customable blur effects.";

      PaintBrush.iconURL = 'static/images/icons/inverted/brush.png';

      PaintBrush.initializeParameters = function() {
        var parameters;
        parameters = PaintBrush.__super__.constructor.initializeParameters.call(this);
        delete parameters['Style'].fillColor;
        if (parameters['Parameters'] == null) {
          parameters['Parameters'] = {};
        }
        parameters['Parameters'].step = {
          type: 'slider',
          label: 'Step',
          min: 1,
          max: 100,
          "default": 11,
          simplified: 20,
          step: 1
        };
        parameters['Parameters'].size = {
          type: 'slider',
          label: 'P.Size',
          min: 1,
          max: 100,
          "default": 10
        };
        parameters['Parameters'].blur = {
          type: 'slider',
          label: 'Blur',
          min: 0,
          max: 100,
          "default": 20
        };
        return parameters;
      };

      PaintBrush.parameters = PaintBrush.initializeParameters();

      PaintBrush.createTool(PaintBrush);

      PaintBrush.prototype.getDrawingBounds = function() {
        return this.getBounds().expand(this.data.size);
      };

      PaintBrush.prototype.beginDraw = function() {
        var point;
        this.initializeDrawing(true);
        point = this.controlPath.firstSegment.point;
        point = this.projectToRaster(point);
        this.context.moveTo(point.x, point.y);
      };

      PaintBrush.prototype.updateDraw = function(offset, step) {
        var endColor, innerRadius, midColor, normal, outerRadius, point, radialGradient;
        if (!step) {
          return;
        }
        point = this.controlPath.getPointAt(offset);
        normal = this.controlPath.getNormalAt(offset).normalize();
        point = this.projectToRaster(point);
        innerRadius = this.data.size * (1 - this.data.blur / 100);
        outerRadius = this.data.size;
        radialGradient = this.context.createRadialGradient(point.x, point.y, innerRadius, point.x, point.y, outerRadius);
        midColor = new P.Color(this.data.strokeColor);
        midColor.alpha = 0.5;
        endColor = new P.Color(this.data.strokeColor);
        endColor.alpha = 0;
        radialGradient.addColorStop(0, this.data.strokeColor);
        radialGradient.addColorStop(0.5, midColor.toCSS());
        radialGradient.addColorStop(1, endColor.toCSS());
        this.context.fillStyle = radialGradient;
        this.context.fillRect(point.x - outerRadius, point.y - outerRadius, 2 * outerRadius, 2 * outerRadius);
      };

      PaintBrush.prototype.endDraw = function() {};

      return PaintBrush;

    })(StepPath);
    return PaintBrush;
  });

}).call(this);
