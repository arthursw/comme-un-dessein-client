// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(['paper', 'R', 'Utils/Utils', 'Items/Paths/PrecisePaths/SpeedPaths/SpeedPath'], function(P, R, Utils, SpeedPath) {
    var ShapePath;
    ShapePath = (function(superClass) {
      extend(ShapePath, superClass);

      function ShapePath() {
        return ShapePath.__super__.constructor.apply(this, arguments);
      }

      ShapePath.label = 'Shape path';

      ShapePath.description = "Draws rectangles or ellipses along the path. The size of the shapes is function of the drawing speed.";

      ShapePath.initializeParameters = function() {
        var parameters;
        parameters = ShapePath.__super__.constructor.initializeParameters.call(this);
        if (parameters['Parameters'] == null) {
          parameters['Parameters'] = {};
        }
        parameters['Parameters'].step = {
          type: 'slider',
          label: 'Step',
          min: 5,
          max: 100,
          "default": 20,
          simplified: 20,
          step: 1
        };
        parameters['Parameters'].ellipse = {
          type: 'checkbox',
          label: 'Ellipse',
          "default": false
        };
        parameters['Parameters'].minWidth = {
          type: 'slider',
          label: 'Min width',
          min: 1,
          max: 250,
          "default": 1
        };
        parameters['Parameters'].maxWidth = {
          type: 'slider',
          label: 'Max width',
          min: 1,
          max: 250,
          "default": 200
        };
        parameters['Parameters'].speedForLength = {
          type: 'checkbox',
          label: 'Speed for length',
          "default": false
        };
        parameters['Parameters'].minSpeed = {
          type: 'slider',
          label: 'Min speed',
          min: 1,
          max: 250,
          "default": 1
        };
        parameters['Parameters'].maxSpeed = {
          type: 'slider',
          label: 'Max speed',
          min: 1,
          max: 250,
          "default": 200
        };
        return parameters;
      };

      ShapePath.parameters = ShapePath.initializeParameters();

      ShapePath.createTool(ShapePath);

      ShapePath.prototype.beginDraw = function() {
        this.initializeDrawing(false);
        this.lastOffset = 0;
      };

      ShapePath.prototype.updateDraw = function(offset, step) {
        var midOffset, speed, stepOffset;
        if (!step) {
          return;
        }
        speed = this.speedAt(offset);
        if (!this.data.speedForLength) {
          this.addShape(offset, this.data.step, speed);
        } else {
          speed = this.data.minSpeed + (speed / this.constructor.maxSpeed) * (this.data.maxSpeed - this.data.minSpeed);
          stepOffset = offset - this.lastOffset;
          if (stepOffset > speed) {
            midOffset = (offset + this.lastOffset) / 2;
            this.addShape(midOffset, stepOffset, speed);
            this.lastOffset = offset;
          }
        }
      };

      ShapePath.prototype.endDraw = function() {};

      ShapePath.prototype.addShape = function(offset, height, speed) {
        var normal, point, rectangle, shape, width;
        point = this.controlPath.getPointAt(offset);
        normal = this.controlPath.getNormalAt(offset);
        width = this.data.minWidth + (this.data.maxWidth - this.data.minWidth) * speed / this.constructor.maxSpeed;
        rectangle = new P.Rectangle(point.subtract(new P.Point(width / 2, height / 2)), new P.Size(width, height));
        if (!this.data.ellipse) {
          shape = this.addPath(new P.Path.Rectangle(rectangle));
        } else {
          shape = this.addPath(new P.Path.Ellipse(rectangle));
        }
        shape.rotation = normal.angle;
      };

      return ShapePath;

    })(SpeedPath);
    return ShapePath;
  });

}).call(this);

//# sourceMappingURL=ShapePath.js.map
