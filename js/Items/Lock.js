// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(['paper', 'R', 'Utils/Utils', 'Items/Item', 'UI/Modal'], function(P, R, Utils, Item, Modal) {
    var Link, Lock, VideoGame, Website;
    Lock = (function(superClass) {
      extend(Lock, superClass);

      Lock.label = 'Lock';

      Lock.object_type = 'lock';

      Lock.initialize = function(rectangle) {
        var modal, siteURLJ, siteUrlExtractor, submit;
        submit = function(data) {
          var lock;
          switch (data.object_type) {
            case 'lock':
              lock = new Lock(rectangle, data);
          }
          lock.save(true);
          lock.update('rectangle');
          lock.select();
        };
        modal = Modal.createModal({
          title: 'Create a locked area',
          submit: submit
        });
        siteURLJ = $("<div class=\"form-group siteName\">\n	<label for=\"modalSiteName\">Site name</label>\n	<div class=\"input-group\">\n		<span class=\"input-group-addon\">commeUnDessein.city/#</span>\n		<input id=\"modalSiteName\" type=\"text\" class=\"site-name form-control\" placeholder=\"Site name\">\n	</div>\n</div>");
        siteURLJ.find('input.site-name').attr('placeholder', R.me);
        siteUrlExtractor = function(data, siteURLJ) {
          data.siteURL = siteURLJ.find("#modalSiteName").val();
          return true;
        };
        modal.addCustomContent({
          name: 'siteName',
          divJ: siteURLJ,
          extractor: siteUrlExtractor
        });
        modal.addCheckbox({
          name: 'restrictArea',
          label: 'Restrict area',
          helpMessage: "Users visiting your website will not be able to go out of the site boundaries."
        });
        modal.addCheckbox({
          name: 'disableToolbar',
          label: 'Disable toolbar',
          helpMessage: "Users will not have access to the toolbar on your site."
        });
        modal.show();
      };

      Lock.highlightStage = function(color) {
        R.view.backgroundRectangle = new P.Path.Rectangle(P.view.bounds);
        R.view.backgroundRectangle.fillColor = color;
        R.view.backgroundRectangle.sendToBack();
      };

      Lock.unhighlightStage = function() {
        var ref;
        if ((ref = R.view.backgroundRectangle) != null) {
          ref.remove();
        }
        R.view.backgroundRectangle = null;
      };

      Lock.highlightValidity = function(item) {
        this.validatePosition(item, null, true);
      };

      Lock.validatePosition = function(item, bounds, highlight) {
        var i, j, len, len1, lock, locks, ref, ref1, ref2, ref3, ref4;
        if (bounds == null) {
          bounds = null;
        }
        if (highlight == null) {
          highlight = false;
        }
        if ((typeof item.getDrawingBounds === "function" ? item.getDrawingBounds() : void 0) > R.rasterizer.maxArea()) {
          if (highlight) {
            R.alertManager.alert('The path is too big', 'Warning');
          } else {
            return false;
          }
        }
        if (bounds == null) {
          bounds = item.getBounds();
        }
        if ((ref = R.limitPathV) != null) {
          ref.strokeColor = 'green';
        }
        if ((ref1 = R.limitPathH) != null) {
          ref1.strokeColor = 'green';
        }
        ref2 = R.locks;
        for (i = 0, len = ref2.length; i < len; i++) {
          lock = ref2[i];
          lock.unhighlight();
        }
        this.unhighlightStage();
        if (R.view.grid.rectangleOverlapsTwoPlanets(bounds)) {
          if (highlight) {
            if ((ref3 = R.limitPathV) != null) {
              ref3.strokeColor = 'red';
            }
            if ((ref4 = R.limitPathH) != null) {
              ref4.strokeColor = 'red';
            }
          } else {
            return false;
          }
        }
        locks = Lock.getLocksWhichIntersect(bounds);
        for (j = 0, len1 = locks.length; j < len1; j++) {
          lock = locks[j];
          if (Lock.prototype.isPrototypeOf(item)) {
            if (item !== lock) {
              if (highlight) {
                lock.highlight('red');
              } else {
                return false;
              }
            }
          } else {
            if (lock.getBounds().contains(bounds) && R.me === lock.owner) {
              if (item.lock !== lock) {
                if (highlight) {
                  lock.highlight('green');
                } else {
                  lock.addItem(item);
                }
              }
            } else {
              if (highlight) {
                lock.highlight('red');
              } else {
                return false;
              }
            }
          }
        }
        if (locks.length === 0) {
          if (item.lock != null) {
            if (highlight) {
              this.highlightStage('green');
            } else {
              Item.addItemToStage(item);
            }
          }
        }
        if (Lock.prototype.isPrototypeOf(item)) {
          if (!item.containsChildren()) {
            if (highlight) {
              item.highlight('red');
            } else {
              return false;
            }
          }
        }
        return true;
      };

      Lock.getLockWhichContains = function(rectangle) {
        var i, len, lock, ref;
        ref = R.locks;
        for (i = 0, len = ref.length; i < len; i++) {
          lock = ref[i];
          if (lock.getBounds().contains(rectangle)) {
            return lock;
          }
        }
        return null;
      };

      Lock.getLocksWhichIntersect = function(rectangle) {
        var i, len, lock, locks, ref;
        locks = [];
        ref = R.locks;
        for (i = 0, len = ref.length; i < len; i++) {
          lock = ref[i];
          if (lock.getBounds().intersects(rectangle)) {
            locks.push(lock);
          }
        }
        return locks;
      };

      Lock.initializeParameters = function() {
        var fillColor, parameters, strokeColor, strokeWidth;
        parameters = Lock.__super__.constructor.initializeParameters.call(this);
        strokeWidth = $.extend(true, {}, R.parameters.strokeWidth);
        strokeWidth["default"] = 1;
        strokeColor = $.extend(true, {}, R.parameters.strokeColor);
        strokeColor["default"] = 'black';
        fillColor = $.extend(true, {}, R.parameters.fillColor);
        fillColor["default"] = 'white';
        fillColor.defaultCheck = true;
        fillColor.defaultFunction = null;
        if (parameters['Style'] == null) {
          parameters['Style'] = {};
        }
        parameters['Style'].strokeWidth = strokeWidth;
        parameters['Style'].strokeColor = strokeColor;
        parameters['Style'].fillColor = fillColor;
        parameters['Options'] = {
          addModule: {
            type: 'button',
            label: 'Link module',
            "default": function() {
              var i, item, len, ref;
              ref = R.selectedItems;
              for (i = 0, len = ref.length; i < len; i++) {
                item = ref[i];
                if (Lock.prototype.isPrototypeOf(item)) {
                  item.askForModule();
                }
              }
            },
            initializeController: function(controller) {
              var firstItem, ref, spanJ;
              spanJ = $(controller.domElement).find('.property-name');
              firstItem = R.selectedItems[0];
              if ((firstItem != null ? (ref = firstItem.data) != null ? ref.moduleName : void 0 : void 0) != null) {
                spanJ.text('Change module (' + firstItem.data.moduleName + ')');
              }
            }
          }
        };
        return parameters;
      };

      Lock.parameters = Lock.initializeParameters();

      function Lock(rectangle1, data1, id, pk1, owner, date1, modulePk) {
        var i, item, len, pk, pkString, ref, ref1, title, titleJ;
        this.rectangle = rectangle1;
        this.data = data1 != null ? data1 : null;
        this.id = id != null ? id : null;
        this.pk = pk1 != null ? pk1 : null;
        this.owner = owner != null ? owner : null;
        this.date = date1;
        this.modulePk = modulePk;
        this.select = bind(this.select, this);
        this.update = bind(this.update, this);
        this.saveCallback = bind(this.saveCallback, this);
        Lock.__super__.constructor.call(this, this.data, this.id, this.pk);
        R.locks.push(this);
        this.group.name = 'lock group';
        this.draw();
        R.view.lockLayer.addChild(this.group);
        this.sortedPaths = [];
        this.sortedDivs = [];
        this.itemListsJ = R.templatesJ.find(".layer").clone();
        pkString = '' + (this.pk || this.id);
        pkString = pkString.substring(pkString.length - 3);
        title = "Lock ..." + pkString;
        if (this.owner) {
          title += " of " + this.owner;
        }
        titleJ = this.itemListsJ.find(".title");
        titleJ.text(title);
        titleJ.click((function(_this) {
          return function(event) {
            _this.itemListsJ.toggleClass('closed');
            if (!event.shiftKey) {
              R.tools.select.deselectAll();
            }
            _this.select();
          };
        })(this));
        this.itemListsJ.find('.rDiv-list').sortable({
          stop: Item.zIndexSortStop,
          delay: 250
        });
        this.itemListsJ.find('.rPath-list').sortable({
          stop: Item.zIndexSortStop,
          delay: 250
        });
        this.itemListsJ.mouseover((function(_this) {
          return function(event) {
            _this.highlight();
          };
        })(this));
        this.itemListsJ.mouseout((function(_this) {
          return function(event) {
            _this.unhighlight();
          };
        })(this));
        R.sidebar.itemListsJ.prepend(this.itemListsJ);
        this.itemListsJ = R.sidebar.itemListsJ.find(".layer:first");
        ref = R.items;
        for (item = i = 0, len = ref.length; i < len; item = ++i) {
          pk = ref[item];
          if (Lock.prototype.isPrototypeOf(item)) {
            continue;
          }
          if (item.getBounds().intersects(this.rectangle)) {
            this.addItem(item);
          }
        }
        if ((ref1 = this.data) != null ? ref1.loadEntireArea : void 0) {
          R.view.entireAreas.push(this);
        }
        if (this.modulePk != null) {
          $.ajax({
            method: "POST",
            url: "ajaxCall/",
            data: {
              data: JSON.stringify({
                "function": 'getModuleSource',
                args: {
                  pk: this.modulePk,
                  accepted: true
                }
              })
            }
          }).done(R.initializeModule);
        }
        return;
      }

      Lock.prototype.initializeModule = function() {
        var module;
        if (!R.loader.checkError(result)) {
          return;
        }
        module = JSON.parse(result.module);
        R.parentLock = this;
        R.runModule(module);
      };

      Lock.prototype.draw = function() {
        if (this.drawing != null) {
          this.drawing.remove();
        }
        if (this.raster != null) {
          this.raster.remove();
        }
        this.raster = null;
        this.drawing = new P.Path.Rectangle(this.rectangle);
        this.drawing.name = 'rlock background';
        this.drawing.strokeWidth = this.data.strokeWidth > 0 ? this.data.strokeWidth : 1;
        this.drawing.strokeColor = this.data.strokeColor != null ? this.data.strokeColor : 'black';
        this.drawing.fillColor = this.data.fillColor || new P.Color(255, 255, 255, 0.5);
        this.drawing.controller = this;
        this.group.addChild(this.drawing);
      };

      Lock.prototype.setParameter = function(name, value, updateGUI, update) {
        Lock.__super__.setParameter.call(this, name, value, updateGUI, update);
        switch (name) {
          case 'strokeWidth':
          case 'strokeColor':
          case 'fillColor':
            if (this.raster == null) {
              this.drawing[name] = this.data[name];
            } else {
              this.draw();
            }
        }
      };

      Lock.prototype.save = function(addCreateCommand) {
        var args, data, siteData;
        if (addCreateCommand == null) {
          addCreateCommand = true;
        }
        if (R.view.grid.rectangleOverlapsTwoPlanets(this.rectangle)) {
          return;
        }
        if (this.rectangle.area === 0) {
          this.remove();
          R.alertManager.alert("Error: your box is not valid.", "error");
          return;
        }
        data = this.getData();
        siteData = {
          restrictArea: data.restrictArea,
          disableToolbar: data.disableToolbar,
          loadEntireArea: data.loadEntireArea
        };
        args = {
          clientId: this.id,
          city: {
            city: R.city
          },
          box: Utils.CS.boxFromRectangle(this.rectangle),
          object_type: this.constructor.object_type,
          data: JSON.stringify(data),
          siteData: JSON.stringify(siteData),
          siteName: data.siteName
        };
        $.ajax({
          method: "POST",
          url: "ajaxCall/",
          data: {
            data: JSON.stringify({
              "function": 'saveBox',
              args: args
            })
          }
        }).done(this.saveCallback);
        Lock.__super__.save.apply(this, arguments);
      };

      Lock.prototype.saveCallback = function(result) {
        R.loader.checkError(result);
        if (result.pk == null) {
          this.remove();
          return;
        }
        this.owner = result.owner;
        this.setPK(result.pk);
        if (this.updateAfterSave != null) {
          this.update(this.updateAfterSave);
        }
        Lock.__super__.saveCallback.apply(this, arguments);
      };

      Lock.prototype.addUpdateFunctionAndArguments = function(args, type) {
        var i, item, len, ref;
        ref = this.children();
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          item.addUpdateFunctionAndArguments(args, type);
        }
      };

      Lock.prototype.update = function(type) {
        var args, i, item, itemsToUpdate, len, pk, ref, updateBoxArgs;
        if (this.pk == null) {
          this.updateAfterSave = type;
          return;
        }
        delete this.updateAfterSave;
        if (R.view.grid.rectangleOverlapsTwoPlanets(this.rectangle)) {
          return;
        }
        updateBoxArgs = {
          box: Utils.CS.boxFromRectangle(this.rectangle),
          pk: this.pk,
          object_type: this.object_type,
          name: this.data.name,
          data: this.getStringifiedData(),
          updateType: type,
          modulePk: this.modulePk
        };
        args = [];
        args.push({
          "function": 'updateBox',
          "arguments": updateBoxArgs
        });
        if (type === 'position' || type === 'rectangle') {
          itemsToUpdate = type === 'position' ? this.children() : [];
          ref = R.items;
          for (pk in ref) {
            item = ref[pk];
            if (!Lock.prototype.isPrototypeOf(item)) {
              if (item.lock !== this && this.rectangle.contains(item.getBounds())) {
                this.addItem(item);
                itemsToUpdate.push(item);
              }
            }
          }
          for (i = 0, len = itemsToUpdate.length; i < len; i++) {
            item = itemsToUpdate[i];
            args.push({
              "function": item.getUpdateFunction(),
              "arguments": item.getUpdateArguments()
            });
          }
        }
        $.ajax({
          method: "POST",
          url: "ajaxCall/",
          data: {
            data: JSON.stringify({
              "function": 'multipleCalls',
              args: {
                functionsAndArguments: args
              }
            })
          }
        }).done(this.updateCallback);
      };

      Lock.prototype.updateCallback = function(results) {
        var i, len, result;
        for (i = 0, len = results.length; i < len; i++) {
          result = results[i];
          R.loader.checkError(result);
        }
      };

      Lock.prototype.deleteFromDatabase = function() {
        $.ajax({
          method: "POST",
          url: "ajaxCall/",
          data: {
            data: JSON.stringify({
              "function": 'deleteBox',
              args: {
                'pk': this.pk
              }
            })
          }
        }).done(R.loader.checkError);
      };

      Lock.prototype.setRectangle = function(rectangle, update) {
        if (update == null) {
          update = true;
        }
        Lock.__super__.setRectangle.call(this, rectangle, update);
        Utils.Rectangle.updatePathRectangle(this.drawing, rectangle);
      };

      Lock.prototype.moveTo = function(position, update) {
        var delta, i, item, len, ref;
        delta = position.subtract(this.rectangle.center);
        ref = this.children();
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          item.rectangle.center.x += delta.x;
          item.rectangle.center.y += delta.y;
          if (Item.Div.prototype.isPrototypeOf(item)) {
            item.updateTransform();
          }
        }
        Lock.__super__.moveTo.call(this, position, update);
      };

      Lock.prototype.containsChildren = function() {
        var i, item, len, ref;
        ref = this.children();
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          if (!this.rectangle.contains(item.getBounds())) {
            return false;
          }
        }
        return true;
      };

      Lock.prototype.showChildren = function() {
        var i, item, len, ref, ref1;
        ref = this.children();
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          if ((ref1 = item.group) != null) {
            ref1.visible = true;
          }
        }
      };

      Lock.prototype.select = function(updateOptions) {
        var i, item, len, ref;
        if (updateOptions == null) {
          updateOptions = true;
        }
        if (!Lock.__super__.select.call(this, updateOptions) || this.owner !== R.me) {
          return false;
        }
        ref = this.children();
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          item.deselect();
        }
        return true;
      };

      Lock.prototype.remove = function() {
        var i, len, path, ref;
        ref = this.children();
        for (i = 0, len = ref.length; i < len; i++) {
          path = ref[i];
          this.removeItem(path);
        }
        this.itemListsJ.remove();
        this.itemListsJ = null;
        Utils.Array.remove(R.locks, this);
        this.drawing = null;
        Lock.__super__.remove.apply(this, arguments);
      };

      Lock.prototype.children = function() {
        return this.sortedDivs.concat(this.sortedPaths);
      };

      Lock.prototype.addItem = function(item) {
        Item.addItemTo(item, this);
        item.lock = this;
      };

      Lock.prototype.removeItem = function(item) {
        Item.addItemToStage(item);
        item.lock = null;
      };

      Lock.prototype.highlight = function(color) {
        Lock.__super__.highlight.call(this);
        if (color) {
          this.highlightRectangle.fillColor = color;
          this.highlightRectangle.strokeColor = color;
          this.highlightRectangle.dashArray = [];
        }
      };

      Lock.prototype.askForModule = function() {
        $.ajax({
          method: "POST",
          url: "ajaxCall/",
          data: {
            data: JSON.stringify({
              "function": 'getModuleList',
              args: {}
            })
          }
        }).done(this.createSelectModuleModal);
      };

      Lock.prototype.createSelectModuleModal = function(result) {};

      Lock.prototype.addModule = function() {};

      return Lock;

    })(Item);
    Website = (function(superClass) {
      extend(Website, superClass);

      Website.label = 'Website';

      Website.object_type = 'website';

      function Website(rectangle1, data1, id, pk1, owner, date) {
        this.rectangle = rectangle1;
        this.data = data1 != null ? data1 : null;
        this.id = id != null ? id : null;
        this.pk = pk1 != null ? pk1 : null;
        this.owner = owner != null ? owner : null;
        if (date == null) {
          date = null;
        }
        Website.__super__.constructor.call(this, this.rectangle, this.data, this.id, this.pk, this.owner, date);
        return;
      }

      Website.prototype.enableInteraction = function() {};

      return Website;

    })(Lock);
    VideoGame = (function(superClass) {
      extend(VideoGame, superClass);

      VideoGame.label = 'Video game';

      VideoGame.object_type = 'video-game';

      function VideoGame(rectangle1, data1, id, pk1, owner, date) {
        this.rectangle = rectangle1;
        this.data = data1 != null ? data1 : null;
        this.id = id != null ? id : null;
        this.pk = pk1 != null ? pk1 : null;
        this.owner = owner != null ? owner : null;
        if (date == null) {
          date = null;
        }
        VideoGame.__super__.constructor.call(this, this.rectangle, this.data, this.id, this.pk, this.owner, date);
        this.currentCheckpoint = -1;
        this.checkpoints = [];
        return;
      }

      VideoGame.prototype.getData = function() {
        var data;
        data = VideoGame.__super__.getData.call(this);
        data.loadEntireArea = true;
        return data;
      };

      VideoGame.prototype.enableInteraction = function() {};

      VideoGame.prototype.initGUI = function() {
        console.log("Gui init");
      };

      VideoGame.prototype.updateGame = function(tool) {
        var checkpoint, i, len, ref;
        ref = this.checkpoints;
        for (i = 0, len = ref.length; i < len; i++) {
          checkpoint = ref[i];
          if (checkpoint.contains(tool.car.position)) {
            if (this.currentCheckpoint === checkpoint.data.checkpointNumber - 1) {
              this.currentCheckpoint = checkpoint.data.checkpointNumber;
              if (this.currentCheckpoint === 0) {
                this.startTime = Date.now();
                R.alertManager.alert("Game started, go go go!", "success");
              } else {
                R.alertManager.alert("Checkpoint " + this.currentCheckpoint + " passed!", "success");
              }
            }
            if (this.currentCheckpoint === this.checkpoints.length - 1) {
              this.finishGame();
            }
          }
        }
      };

      VideoGame.prototype.finishGame = function() {
        var time;
        time = (Date.now() - this.startTime) / 1000;
        R.alertManager.alert("You won ! Your time is: " + time.toFixed(2) + " seconds.", "success");
        this.currentCheckpoint = -1;
      };

      return VideoGame;

    })(Lock);
    Link = (function(superClass) {
      extend(Link, superClass);

      Link.label = 'Link';

      Link.modalTitle = "Insert a hyperlink";

      Link.modalTitleUpdate = "Modify your link";

      Link.object_type = 'link';

      Link.initializeParameters = function() {
        var parameters;
        parameters = Link.__super__.constructor.initializeParameters.call(this);
        delete parameters['Lock'];
        return parameters;
      };

      Link.parameters = Link.initializeParameters();

      function Link(rectangle1, data1, id, pk1, owner, date) {
        var ref;
        this.rectangle = rectangle1;
        this.data = data1 != null ? data1 : null;
        this.id = id != null ? id : null;
        this.pk = pk1 != null ? pk1 : null;
        this.owner = owner != null ? owner : null;
        if (date == null) {
          date = null;
        }
        Link.__super__.constructor.call(this, this.rectangle, this.data, this.id, this.pk, this.owner, date);
        if ((ref = this.linkJ) != null) {
          ref.click((function(_this) {
            return function(event) {
              var location, p, pos;
              if (_this.linkJ.attr("href").indexOf("http://romanesc.co/#") === 0) {
                location = _this.linkJ.attr("href").replace("http://romanesc.co/#", "");
                pos = location.split(',');
                p = new P.Point();
                p.x = parseFloat(pos[0]);
                p.y = parseFloat(pos[1]);
                R.view.moveTo(p, 1000);
                event.preventDefault();
                return false;
              }
            };
          })(this));
        }
        return;
      }

      return Link;

    })(Lock);
    Item.Lock = Lock;
    Item.Link = Link;
    Item.Website = Website;
    Item.VideoGame = VideoGame;
    return Lock;
  });

}).call(this);

//# sourceMappingURL=Lock.js.map
