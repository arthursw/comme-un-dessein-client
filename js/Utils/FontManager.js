// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['paper', 'R', 'Utils/Utils'], function(P, R, Utils) {
    var FontManager;
    FontManager = (function() {
      function FontManager() {
        this.initializeTextOptions = bind(this.initializeTextOptions, this);
        this.loadFonts = bind(this.loadFonts, this);
        var jqxhr;
        this.availableFonts = [];
        this.usedFonts = [];
        jQuery.support.cors = true;
        if (R.offline) {
          return;
        }
        jqxhr = $.getJSON("https://www.googleapis.com/webfonts/v1/webfonts?key=AIzaSyBVfBj_ugQO_w0AK1x9F6yiXByhcNgjQZU", this.initTextOptions);
        jqxhr.done((function(_this) {
          return function(json) {
            console.log('done');
            _this.initializeTextOptions(json);
          };
        })(this));
        jqxhr.fail(function(jqxhr, textStatus, error) {
          var err;
          err = textStatus + ", " + error;
          console.log('failed: ' + err);
        });
        jqxhr.always(function(jqxhr, textStatus, error) {
          var err;
          err = textStatus + ", " + error;
          console.log('always: ' + err);
        });
        return;
      }

      FontManager.prototype.addFont = function(fontFamily, effect) {
        var effects, font, fontAlreadyUsed, fontFamilyURL, j, len, ref;
        if (fontFamily == null) {
          return;
        }
        fontFamilyURL = fontFamily.split(" ").join("+");
        fontAlreadyUsed = false;
        ref = this.usedFonts;
        for (j = 0, len = ref.length; j < len; j++) {
          font = ref[j];
          if (font.family === fontFamilyURL) {
            if (font.effects.indexOf(effect) === -1 && (effect != null)) {
              font.effects.push(effect);
            }
            fontAlreadyUsed = true;
            break;
          }
        }
        if (!fontAlreadyUsed) {
          effects = [];
          if (effect != null) {
            effects.push(effect);
          }
          if (!fontFamilyURL || fontFamilyURL === '') {
            console.log('ERROR: font family URL is null or empty');
          }
          this.usedFonts.push({
            family: fontFamilyURL,
            effects: effects
          });
        }
      };

      FontManager.prototype.loadFonts = function() {
        var effect, font, fontLink, i, j, k, len, len1, newFont, ref, ref1;
        $('head').remove("link.fonts");
        ref = this.usedFonts;
        for (j = 0, len = ref.length; j < len; j++) {
          font = ref[j];
          newFont = font.family;
          if ($('head').find('link[data-font-family="' + font.family + '"]').length === 0) {
            if (font.effects.length > 0 && !(font.effects.length === 1 && font.effects[0] === 'none')) {
              newFont += "&effect=";
              ref1 = font.effects;
              for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
                effect = ref1[i];
                newFont += effect + '|';
              }
              newFont = newFont.slice(0, -1);
            }
            if (R.offline) {
              continue;
            }
            fontLink = $('<link class="fonts" data-font-family="' + font.family + '" rel="stylesheet" type="text/css">');
            fontLink.attr('href', "http://fonts.googleapis.com/css?family=" + newFont);
            $('head').append(fontLink);
          }
        }
      };

      FontManager.prototype.initializeTextOptions = function(data, textStatus, jqXHR) {
        var fontFamilyNames, item, j, len, promise, ref;
        fontFamilyNames = [];
        ref = data.items;
        for (j = 0, len = ref.length; j < len; j++) {
          item = ref[j];
          fontFamilyNames.push({
            value: item.family
          });
        }
        this.typeaheadFontEngine = new Bloodhound({
          name: 'Font families',
          local: fontFamilyNames,
          datumTokenizer: Bloodhound.tokenizers.obj.whitespace('value'),
          queryTokenizer: Bloodhound.tokenizers.whitespace
        });
        promise = this.typeaheadFontEngine.initialize();
        this.availableFonts = data.items;
      };

      return FontManager;

    })();
    return FontManager;
  });

}).call(this);
