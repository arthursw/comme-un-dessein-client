// Generated by CoffeeScript 1.10.0
(function() {
  var baseUrl, getParameters, libs, parameters, prefix, repository;

  libs = '../../libs/';

  getParameters = function(hash) {
    var key, parameters, re, tokens, value;
    hash = hash.replace('#', '');
    parameters = {};
    re = /[?&]?([^=]+)=([^&]*)/g;
    while (tokens = re.exec(hash)) {
      key = decodeURIComponent(tokens[1]);
      value = decodeURIComponent(tokens[2]);
      parameters[key] = value === 'true' ? true : value === 'false' ? false : value;
    }
    return parameters;
  };

  parameters = typeof document !== "undefined" && document !== null ? getParameters(document.location.hash) : null;

  repository = {
    owner: 'arthursw',
    commit: null
  };

  if ((parameters != null) && (parameters['repository-owner'] != null) && (parameters['repository-commit'] != null)) {
    prefix = parameters['repository-use-cdn'] != null ? '//cdn.' : '//';
    baseUrl = prefix + 'rawgit.com/' + parameters['repository-owner'] + '/wetu-client/' + parameters['repository-commit'] + '/js';
    repository = {
      owner: parameters['repository-owner'],
      commit: parameters['repository-commit']
    };
    libs = location.origin + '/static/libs/';
  } else {
    baseUrl = '../static/wetu-client/js';
  }

  requirejs.config({
    waitSeconds: 300,
    baseUrl: baseUrl,
    paths: {
      'i18next': [libs + 'i18next.min'],
      'i18nextXHRBackendID': [libs + 'i18nextXHRBackend'],
      'i18nextBrowserLanguageDetectorID': [libs + 'i18nextBrowserLanguageDetector'],
      'moment': [libs + 'moment.min'],
      'jqueryI18next': [libs + 'jquery-i18next.min'],
      'hammerjs': [libs + 'hammer.min'],
      'jquery-hammer': [libs + 'jquery.hammer'],
      'underscore': [libs + 'underscore-min'],
      'jquery': [libs + 'jquery-2.1.3.min'],
      'jqueryUi': [libs + 'jquery-ui.min'],
      'mousewheel': [libs + 'jquery.mousewheel.min'],
      'tinycolor2': [libs + 'tinycolor'],
      'bootstrap': [libs + 'bootstrap.min'],
      'paper': [libs + 'paper-full'],
      'gui': [libs + 'dat.gui'],
      'zeroClipboard': [libs + 'ZeroClipboard.min'],
      'socket.ioID': libs + 'socket.io',
      'js-cookie': libs + 'js.cookie'
    },
    shim: {
      'mousewheel': ['jquery'],
      'jqueryUi': ['jquery'],
      'bootstrap': ['jquery'],
      'js-cookie': ['jquery'],
      'i18nextXHRBackendID': ['i18next'],
      'i18nextBrowserLanguageDetectorID': ['i18next'],
      'jqueryI18next': ['i18next'],
      'underscore': {
        exports: '_'
      },
      'jquery': {
        exports: '$'
      }
    }
  });

  requirejs(['R', 'jquery', 'underscore'], function(R) {
    R.defaultColors = [];
    R.strokeWidth = $('#canvas').attr('data-city-stroke-width');
    if (_.isString(R.strokeWidth)) {
      R.strokeWidth = parseFloat(R.strokeWidth.replace(',', '.'));
    } else {
      R.strokeWidth = null;
    }
    R.cityWidth = $('#canvas').attr('data-city-width');
    if (_.isString(R.cityWidth)) {
      R.cityWidth = parseFloat(R.cityWidth.replace(',', '.'));
    } else {
      R.cityWidth = null;
    }
    R.cityHeight = $('#canvas').attr('data-city-height');
    if (_.isString(R.cityHeight)) {
      R.cityHeight = parseFloat(R.cityHeight.replace(',', '.'));
    } else {
      R.cityHeight = null;
    }
    R.polygonMode = false;
    R.selectionBlue = '#2fa1d6';
    R.parameters = {};
    R.parameters['General'] = {};
    R.parameters['General'].location = {
      type: 'string',
      label: 'Location',
      "default": '0.0, 0.0',
      permanent: true
    };
    R.parameters["default"] = {};
    R.parameters.strokeWidth = {
      type: 'slider',
      label: 'Stroke width',
      min: 1,
      max: 100,
      "default": 5
    };
    R.parameters.strokeColor = {
      type: 'color',
      label: 'Stroke color'
    };
    R.parameters.fillColor = {
      type: 'color',
      label: 'Fill color'
    };
    R.strokeColor = 'black';
    R.fillColor = "rgb(255,255,255,255)";
    R.displayGrid = false;
    R.repository = repository;
    R.tipibot = parameters['tipibot'];
    R.style = parameters['style'] || 'line';
    R.initialZoom = parameters['zoom'];
    R.getParameters = getParameters;
    R.administrator = parameters['administrator'];
    requirejs(['Main']);
  });

}).call(this);
